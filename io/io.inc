;----------------------------------------------------------------------------------------------
; MSX Emulator for X680x0 - emes.x
;
;    Copyright 1997-1998 teknobow
;


*----------------------------------------------------------------------------------------------
*--- 00h	ユーザー定義
	PortIn 00
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 00



*--- 01h	ユーザー定義
	PortIn 01
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 01



*--- 02h	ユーザー定義
	PortIn 02
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 02



*--- 03h	ユーザー定義
	PortIn 03
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 03



*--- 04h	ユーザー定義
	PortIn 04
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 04



*--- 05h	ユーザー定義
	PortIn 05
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 05



*--- 06h	ユーザー定義
	PortIn 06
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 06



*--- 07h	ユーザー定義
	PortIn 07
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 07



*--- 08h	ユーザー定義
	PortIn 08
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 08



*--- 09h	ユーザー定義
	PortIn 09
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 09



*--- 0Ah	ユーザー定義
	PortIn 0A
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 0A



*--- 0Bh	ユーザー定義
	PortIn 0B
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 0B



*--- 0Ch	ユーザー定義
	PortIn 0C
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 0C



*--- 0Dh	ユーザー定義
	PortIn 0D
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 0D



*--- 0Eh	ユーザー定義
	PortIn 0E
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 0E



*--- 0Fh	ユーザー定義
	PortIn 0F
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 0F



*--- 10h	ユーザー定義
	PortIn 10
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 10



*--- 11h	ユーザー定義
	PortIn 11
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 11



*--- 12h	ユーザー定義
	PortIn 12
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 12



*--- 13h	ユーザー定義
	PortIn 13
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 13



*--- 14h	ユーザー定義
	PortIn 14
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 14



*--- 15h	ユーザー定義
	PortIn 15
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 15



*--- 16h	ユーザー定義
	PortIn 16
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 16



*--- 17h	ユーザー定義
	PortIn 17
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 17



*--- 18h	ユーザー定義
	PortIn 18
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 18



*--- 19h	ユーザー定義
	PortIn 19
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 19



*--- 1Ah	ユーザー定義
	PortIn 1A
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 1A



*--- 1Bh	ユーザー定義
	PortIn 1B
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 1B



*--- 1Ch	ユーザー定義
	PortIn 1C
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 1C



*--- 1Dh	ユーザー定義
	PortIn 1D
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 1D



*--- 1Eh	ユーザー定義
	PortIn 1E
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 1E



*--- 1Fh	ユーザー定義
	PortIn 1F
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 1F



*--- 20h	ユーザー定義
	PortIn 20
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 20



*--- 21h	ユーザー定義
	PortIn 21
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 21



*--- 22h	ユーザー定義
	PortIn 22
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 22



*--- 23h	ユーザー定義
	PortIn 23
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 23



*--- 24h	ユーザー定義
	PortIn 24
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 24



*--- 25h	ユーザー定義
	PortIn 25
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 25



*--- 26h	ユーザー定義
	PortIn 26
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 26



*--- 27h	ユーザー定義
	PortIn 27
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 27



*--- 28h	ユーザー定義
	PortIn 28
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 28



*--- 29h	ユーザー定義
	PortIn 29
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 29



*--- 2Ah	ユーザー定義
	PortIn 2A
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 2A



*--- 2Bh	ユーザー定義
	PortIn 2B
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 2B



*--- 2Ch	ユーザー定義
	PortIn 2C
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 2C



*--- 2Dh	ユーザー定義
	PortIn 2D
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 2D



*--- 2Eh	ユーザー定義
	PortIn 2E
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 2E



*--- 2Fh	ユーザー定義
	PortIn 2F
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 2F



*--- 30h	ユーザー定義
	PortIn 30
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 30



*--- 31h	ユーザー定義
	PortIn 31
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 31



*--- 32h	ユーザー定義
	PortIn 32
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 32



*--- 33h	ユーザー定義
	PortIn 33
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 33



*--- 34h	ユーザー定義
	PortIn 34
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 34



*--- 35h	ユーザー定義
	PortIn 35
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 35



*--- 36h	ユーザー定義
	PortIn 36
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 36



*--- 37h	ユーザー定義
	PortIn 37
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 37



*--- 38h	ユーザー定義
	PortIn 38
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 38



*--- 39h	ユーザー定義
	PortIn 39
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 39



*--- 3Ah	ユーザー定義
	PortIn 3A
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 3A



*--- 3Bh	ユーザー定義
	PortIn 3B
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 3B



*--- 3Ch	ユーザー定義
	PortIn 3C
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 3C



*--- 3Dh	ユーザー定義
	PortIn 3D
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 3D



*--- 3Eh	ユーザー定義
	PortIn 3E
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 3E



*--- 3Fh	ユーザー定義
	PortIn 3F
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 3F



*--- 40h	拡張I/O
	PortIn 40
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 40



*--- 41h	拡張I/O
	PortIn 41
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 41



*--- 42h	拡張I/O
	PortIn 42
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 42



*--- 43h	拡張I/O
	PortIn 43
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 43



*--- 44h	拡張I/O
	PortIn 44
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 44



*--- 45h	拡張I/O
	PortIn 45
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 45



*--- 46h	拡張I/O
	PortIn 46
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 46



*--- 47h	拡張I/O
	PortIn 47
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 47



*--- 48h	拡張I/O
	PortIn 48
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 48



*--- 49h	拡張I/O
	PortIn 49
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 49



*--- 4Ah	拡張I/O
	PortIn 4A
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 4A



*--- 4Bh	拡張I/O
	PortIn 4B
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 4B



*--- 4Ch	拡張I/O
	PortIn 4C
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 4C



*--- 4Dh	拡張I/O
	PortIn 4D
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 4D



*--- 4Eh	拡張I/O
	PortIn 4E
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 4E



*--- 4Fh	拡張I/O
	PortIn 4F
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 4F



*--- 50h	システム予約
	PortIn 50
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 50



*--- 51h	システム予約
	PortIn 51
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 51



*--- 52h	システム予約
	PortIn 52
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 52



*--- 53h	システム予約
	PortIn 53
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 53



*--- 54h	システム予約
	PortIn 54
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 54



*--- 55h	システム予約
	PortIn 55
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 55



*--- 56h	システム予約
	PortIn 56
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 56



*--- 57h	システム予約
	PortIn 57
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 57



*--- 58h	システム予約
	PortIn 58
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 58



*--- 59h	システム予約
	PortIn 59
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 59



*--- 5Ah	システム予約
	PortIn 5A
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 5A



*--- 5Bh	システム予約
	PortIn 5B
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 5B



*--- 5Ch	システム予約
	PortIn 5C
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 5C



*--- 5Dh	システム予約
	PortIn 5D
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 5D



*--- 5Eh	システム予約
	PortIn 5E
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 5E



*--- 5Fh	システム予約
	PortIn 5F
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 5F



*--- 60h	システム予約
	PortIn 60
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 60



*--- 61h	システム予約
	PortIn 61
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 61



*--- 62h	システム予約
	PortIn 62
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 62



*--- 63h	システム予約
	PortIn 63
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 63



*--- 64h	システム予約
	PortIn 64
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 64



*--- 65h	システム予約
	PortIn 65
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 65



*--- 66h	システム予約
	PortIn 66
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 66



*--- 67h	システム予約
	PortIn 67
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 67



*--- 68h	システム予約
	PortIn 68
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 68



*--- 69h	システム予約
	PortIn 69
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 69



*--- 6Ah	システム予約
	PortIn 6A
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 6A



*--- 6Bh	システム予約
	PortIn 6B
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 6B



*--- 6Ch	システム予約
	PortIn 6C
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 6C



*--- 6Dh	システム予約
	PortIn 6D
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 6D



*--- 6Eh	システム予約
	PortIn 6E
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 6E



*--- 6Fh	システム予約
	PortIn 6F
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 6F



*--- 70h	MIDIサウルス (BIT2)
	PortIn 70
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 70



*--- 71h	MIDIサウルス (BIT2)
	PortIn 71
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 71



*--- 72h	MIDIサウルス (BIT2)
	PortIn 72
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 72



*--- 73h	MIDIサウルス (BIT2)
	PortIn 73
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 73



*--- 74h	システム予約
	PortIn 74
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 74



*--- 75h	システム予約
	PortIn 75
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 75



*--- 76h	システム予約
	PortIn 76
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 76



*--- 77h	システム予約
	PortIn 77
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 77



*--- 78h	システム予約
	PortIn 78
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 78



*--- 79h	システム予約
	PortIn 79
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 79



*--- 7Ah	システム予約
	PortIn 7A
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 7A



*--- 7Bh	システム予約
	PortIn 7B
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 7B



*--- 7Ch	MSX-MUSIC
	PortIn 7C
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 7C



*--- 7Dh	MSX-MUSIC
	PortIn 7D
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 7D



*--- 7Eh	システム予約
	PortIn 7E
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 7E



*--- 7Fh	システム予約
	PortIn 7F
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 7F



*--- 80h	RS-232C : 8251 データ
	PortIn 80
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 80



*--- 81h	RS-232C : 8251 ステータス・コマンド
	PortIn 81
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 81



*--- 82h	RS-232C : ステータスリード・インタラプトマスク
	PortIn 82
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 82



*--- 83h	RS-232C : 未使用
	PortIn 83
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 83



*--- 84h	RS-232C : 8253
	PortIn 84
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 84



*--- 85h	RS-232C : 8253
	PortIn 85
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 85



*--- 86h	RS-232C : 8253
	PortIn 86
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 86



*--- 87h	RS-232C : 8253
	PortIn 87
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 87



*--- 88h	MSX1にV9938をのせたときのI/O
	PortIn 88
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 88



*--- 89h	MSX1にV9938をのせたときのI/O
	PortIn 89
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 89



*--- 8Ah	MSX1にV9938をのせたときのI/O
	PortIn 8A
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 8A



*--- 8Bh	MSX1にV9938をのせたときのI/O
	PortIn 8B
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 8B



*--- 8Ch	MSX MODEM
	PortIn 8C
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 8C



*--- 8Dh	MSX MODEM
	PortIn 8D
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 8D



*--- 8Eh	システム予約
	PortIn 8E
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 8E



*--- 8Fh	システム予約
	PortIn 8F
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 8F



*--- 90h	プリンタポート : ビット 0 ストローブ出力 (Write)
	PortIn 90
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 90



*--- 91h	プリンタポート : ビット 1 ステータス入力 (Read)
	PortIn 91
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 91



*--- 92h	システム予約
	PortIn 92
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 92



*--- 93h	システム予約
	PortIn 93
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 93



*--- 94h	システム予約
	PortIn 94
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 94



*--- 95h	システム予約
	PortIn 95
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 95



*--- 96h	システム予約
	PortIn 96
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 96



*--- 97h	システム予約
	PortIn 97
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 97



;--- 98h	VDP (V9938) MSX2 : VRAMからのデータ読みだし
	PortIn 98
	move.b	(regVadr)+,d1				*  8
	
.if MSX1screen
	move.w	regVadr,d0				*  4
	tst.b	d0					*  4
	beq.s	@f					* 10/ 8 (T/F)
	
	rts						* 16
@@:
	andi.w	#%0011_1111_1111_1111,d0		*  8
	beq.s	@f					* 10/ 8 (T/F)
	
	rts						* 16
@@:
	lea	-$4000(regVadr),regVadr			*  8
	
	rts						* 16
.else
	move.w	regVadr,d0				*  4
	beq.s	@f					* 10/ 8 (T/F)
	
	rts						* 16
@@:

.if VRAM_LOW
	.if TEXT1
		lea	TXT1_H_IOroutine,regIO		* 12
	.elseif TEXT2
		lea	TXT2_H_IOroutine,regIO		* 12
	.elseif MULTI_COLOR
		lea	MLT_H_IOroutine,regIO		* 12
	.elseif GRAPHIC1
		lea	GRA1_H_IOroutine,regIO		* 12
	.elseif GRAPHIC2
		lea	GRA2_H_IOroutine,regIO		* 12
	.elseif GRAPHIC3
		lea	GRA3_H_IOroutine,regIO		* 12
	.elseif GRAPHIC4
		lea	GRA4_H_IOroutine,regIO		* 12
	.elseif GRAPHIC5
		lea	GRA5_H_IOroutine,regIO		* 12
	.elseif GRAPHIC6
		lea	GRA6_H_IOroutine,regIO		* 12
	.elseif GRAPHIC7
		lea	GRA7_H_IOroutine,regIO		* 12
	.endif
.else
	.if TEXT1
		lea	TXT1_L_IOroutine,regIO		* 12
	.elseif TEXT2
		lea	TXT2_L_IOroutine,regIO		* 12
	.elseif MULTI_COLOR
		lea	MLT_L_IOroutine,regIO		* 12
	.elseif GRAPHIC1
		lea	GRA1_L_IOroutine,regIO		* 12
	.elseif GRAPHIC2
		lea	GRA2_L_IOroutine,regIO		* 12
	.elseif GRAPHIC3
		lea	GRA3_L_IOroutine,regIO		* 12
	.elseif GRAPHIC4
		lea	GRA4_L_IOroutine,regIO		* 12
	.elseif GRAPHIC5
		lea	GRA5_L_IOroutine,regIO		* 12
	.elseif GRAPHIC6
		lea	GRA6_L_IOroutine,regIO		* 12
	.elseif GRAPHIC7
		lea	GRA7_L_IOroutine,regIO		* 12
	.endif
	
	movea.l	VRAM(regFtbl),regVadr			* 16
.endif
	rts						* 16
.endif
	EndPortIn 98



;--- 99h	VDP (V9938) MSX2 : ステータスレジスタの読みだし
	PortIn 99
	move.w	VDPreg_15(regFtbl),d1			* 12
	jmp	PROC_SREG(regIO,d1.w)			* 14
	EndPortIn 99



*--- 9Ah
	PortIn 9A
	st.b	d1					*  6
	
	rts						* 16
	EndPortIn 9A



*--- 9Bh
	PortIn 9B
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 9B



*--- 9Ch	システム予約
	PortIn 9C
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 9C



*--- 9Dh	システム予約
	PortIn 9D
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 9D



*--- 9Eh	システム予約
	PortIn 9E
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 9E



*--- 9Fh	システム予約
	PortIn 9F
	st.b	d1					*  6
	
	rts						* 
	EndPortIn 9F



*--- A0h	サウンドジェネレータ (AY-3-8910) : アドレスラッチ
	PortIn A0
	
;;	trap	#9
	
	
	st.b	d1					*  6
	
	rts						* 
	EndPortIn A0



*--- A1h	サウンドジェネレータ (AY-3-8910) : データライト
	PortIn A1
	st.b	d1					*  6
	
	rts						* 
	EndPortIn A1



*--- A2h	サウンドジェネレータ (AY-3-8910) : データリード
	PortIn A2
	move.w	PSGreg(regZjmp),d1			* 12
	move.w	(regFtbl,d1.l),d1			* 
	jmp	4(regFtbl,d1.l)				* 
	EndPortIn A2



*--- A3h	システム予約
	PortIn A3
	st.b	d1					*  6
	
	rts						* 
	EndPortIn A3



*--- A4h	システム予約
	PortIn A4
	st.b	d1					*  6
	
	rts						* 
	EndPortIn A4



*--- A5h	システム予約
	PortIn A5
	st.b	d1					*  6
	
	rts						* 
	EndPortIn A5



*--- A6h	システム予約
	PortIn A6
	st.b	d1					*  6
	
	rts						* 
	EndPortIn A6



*--- A7h	システム予約
	PortIn A7
	st.b	d1					*  6
	
	rts						* 
	EndPortIn A7



;--- A8h	パラレルポート (8255) : ポート A
;					基本スロット切り替え
	PortIn A8
	move.b	IOdata_A8(regZjmp),d1			* 12
	
	rts						* 
	EndPortIn A8



;--- A9h	パラレルポート (8255) : ポート B = キーボードリターン信号
	PortIn A9
	
;	trap	#9
	
	
	tst.b	noKeyInt(regFtbl)			* 12
	bne.s	2f					* 10/ 8 (T/F)
	
1:
	lea	MSXKeyTable(regFtbl),a0			*  8
	move.w	KeyScanGroup(regZjmp),d0		* 12
	move.b	(a0,d0.w),d1				* 14
	
	rts						* 16
	
2:	;-- デバッグ用
	jsr	Debug_KeySense(regFtbl)			* 
	
	bra	1b					* 10
	EndPortIn A9



;--- AAh	パラレルポート (8255) : ポート C
	PortIn AA
	
;	trap	#9
	
	move.b	PPIportC(regZjmp),d1			* 12
	
	rts						* 
	EndPortIn AA



;--- ABh	パラレルポート (8255) : モードセット
	PortIn AB
	
;	trap	#9
	
	st.b	d1					*  6
	
	rts						* 
	EndPortIn AB



*--- ACh	MSX ENGINE (1チップMSX I/O)
	PortIn AC
	st.b	d1					*  6
	
	rts						* 
	EndPortIn AC



*--- ADh	MSX ENGINE (1チップMSX I/O)
	PortIn AD
	st.b	d1					*  6
	
	rts						* 
	EndPortIn AD



*--- AEh	MSX ENGINE (1チップMSX I/O)
	PortIn AE
	st.b	d1					*  6
	
	rts						* 
	EndPortIn AE



*--- AFh	MSX ENGINE (1チップMSX I/O)
	PortIn AF
	st.b	d1					*  6
	
	rts						* 
	EndPortIn AF



*--- B0h	拡張メモリ (SONY仕様, 8255) : PORT A ADDRESS (A0〜A7)
	PortIn B0
	st.b	d1					*  6
	
	rts						* 
	EndPortIn B0



*--- B1h	拡張メモリ (SONY仕様, 8255) : PORT B ADDRESS (A8〜A10,
*				    : A13〜A15), コントロール, 
*				    : Read/Write
	PortIn B1
	st.b	d1					*  6
	
	rts						* 
	EndPortIn B1



*--- B2h	拡張メモリ (SONY仕様, 8255) : PORT C ADDRESS (A11〜A12)
* 				    : データ (D0〜D7)
	PortIn B2
	st.b	d1					*  6
	
	rts						* 
	EndPortIn B2



*--- B3h	拡張メモリ (SONY仕様, 8255) : モードセット
	PortIn B3
	st.b	d1					*  6
	
	rts						* 
	EndPortIn B3



;--- B4h	CLOCK-IC (RP-5C01) : アドレスラッチ
	PortIn B4
	move.b	ClockIC_adr(regZjmp),d1			* 12
	
	rts						* 16
	EndPortIn B4



;--- B5h	CLOCK-IC (RP-5C01) : データ
	PortIn B5
	move.w	ClockIC_adr(regZjmp),d0			* 12
	cmpi.w	#13,d0					* 
	beq.s	@f					* 10/ 8 (T/F)
	
	jmp	readClockIC(regFtbl)			* 10

@@:
	move.w	ClockIC_modeReg(regZjmp),d1		* 12
	
	rts						* 16
	EndPortIn B5



*--- B6h	システム予約
	PortIn B6
	st.b	d1					*  6
	
	rts						* 
	EndPortIn B6



*--- B7h	システム予約
	PortIn B7
	st.b	d1					*  6
	
	rts						* 
	EndPortIn B7



*--- B8h	ライトペンコントロール (三洋電機仕様) : Read/Write
	PortIn B8
	st.b	d1					*  6
	
	rts						* 
	EndPortIn B8



*--- B9h	ライトペンコントロール (三洋電機仕様) : Read/Write
	PortIn B9
	st.b	d1					*  6
	
	rts						* 
	EndPortIn B9



*--- BAh	ライトペンコントロール (三洋電機仕様) : Read/Write
	PortIn BA
	st.b	d1					*  6
	
	rts						* 
	EndPortIn BA



*--- BBh	ライトペンコントロール (三洋電機仕様) : Writeのみ
	PortIn BB
	st.b	d1					*  6
	
	rts						* 
	EndPortIn BB



*--- BCh	VHDコントロール (JVC, 8255) : PORT A
	PortIn BC
	st.b	d1					*  6
	
	rts						* 
	EndPortIn BC



*--- BDh	VHDコントロール (JVC, 8255) : PORT B
	PortIn BD
	st.b	d1					*  6
	
	rts						* 
	EndPortIn BD



*--- BEh	VHDコントロール (JVC, 8255) : PORT C
	PortIn BE
	st.b	d1					*  6
	
	rts						* 
	EndPortIn BE



*--- BFh	VHDコントロール (JVC, 8255) : モードセット
	PortIn BF
	st.b	d1					*  6
	
	rts						* 
	EndPortIn BF



*--- C0h	MSX-AUDIO
	PortIn C0
	st.b	d1					*  6
	
	rts						* 
	EndPortIn C0



*--- C1h	MSX-AUDIO
	PortIn C1
	st.b	d1					*  6
	
	rts						* 
	EndPortIn C1



*--- C2h	システム予約
	PortIn C2
	st.b	d1					*  6
	
	rts						* 
	EndPortIn C2



*--- C3h	システム予約
	PortIn C3
	st.b	d1					*  6
	
	rts						* 
	EndPortIn C3



*--- C4h	システム予約
	PortIn C4
	st.b	d1					*  6
	
	rts						* 
	EndPortIn C4



*--- C5h	システム予約
	PortIn C5
	st.b	d1					*  6
	
	rts						* 
	EndPortIn C5



*--- C6h	システム予約
	PortIn C6
	st.b	d1					*  6
	
	rts						* 
	EndPortIn C6



*--- C7h	システム予約
	PortIn C7
	st.b	d1					*  6
	
	rts						* 
	EndPortIn C7



*--- C8h	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	PortIn C8
	st.b	d1					*  6
	
	rts						* 
	EndPortIn C8



*--- C9h	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	PortIn C9
	st.b	d1					*  6
	
	rts						* 
	EndPortIn C9



*--- CAh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	PortIn CA
	st.b	d1					*  6
	
	rts						* 
	EndPortIn CA



*--- CBh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	PortIn CB
	st.b	d1					*  6
	
	rts						* 
	EndPortIn CB



*--- CCh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	PortIn CC
	st.b	d1					*  6
	
	rts						* 
	EndPortIn CC



*--- CDh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	PortIn CD
	st.b	d1					*  6
	
	rts						* 
	EndPortIn CD



*--- CEh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	PortIn CE
	st.b	d1					*  6
	
	rts						* 
	EndPortIn CE



*--- CFh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	PortIn CF
	st.b	d1					*  6
	
	rts						* 
	EndPortIn CF



*--- D0h	フロッピィディスクコントローラ (FDC)
	PortIn D0
	st.b	d1					*  6
	
	rts						* 
	EndPortIn D0



*--- D1h	フロッピィディスクコントローラ (FDC)
	PortIn D1
	st.b	d1					*  6
	
	rts						* 
	EndPortIn D1



*--- D2h	フロッピィディスクコントローラ (FDC)
	PortIn D2
	st.b	d1					*  6
	
	rts						* 
	EndPortIn D2



*--- D3h	フロッピィディスクコントローラ (FDC)
	PortIn D3
	st.b	d1					*  6
	
	rts						* 
	EndPortIn D3



*--- D4h	フロッピィディスクコントローラ (FDC)
	PortIn D4
	st.b	d1					*  6
	
	rts						* 
	EndPortIn D4



*--- D5h	フロッピィディスクコントローラ (FDC)
	PortIn D5
	st.b	d1					*  6
	
	rts						* 
	EndPortIn D5



*--- D6h	フロッピィディスクコントローラ (FDC)
	PortIn D6
	st.b	d1					*  6
	
	rts						* 
	EndPortIn D6



*--- D7h	フロッピィディスクコントローラ (FDC)
	PortIn D7
	st.b	d1					*  6
	
	rts						* 
	EndPortIn D7



*--- D8h	漢字ROM (東芝仕様) 第１水準 : b5〜b0 下位アドレス (W)
	PortIn D8
	st.b	d1					*  6
	
	rts						* 
	EndPortIn D8



*--- D9h	漢字ROM (東芝仕様) 第１水準 : b5〜b0 上位アドレス (W)
*	                                    : b7〜b0 データ (R)
	PortIn D9
	st.b	d1					*  6
	
	rts						* 
	EndPortIn D9



*--- DAh	漢字ROM 第２水準
	PortIn DA
	st.b	d1					*  6
	
	rts						* 
	EndPortIn DA



*--- DBh	漢字ROM 第２水準
	PortIn DB
	st.b	d1					*  6
	
	rts						* 
	EndPortIn DB



*--- DCh	システム予約
	PortIn DC
	st.b	d1					*  6
	
	rts						* 
	EndPortIn DC



*--- DDh	システム予約
	PortIn DD
	st.b	d1					*  6
	
	rts						* 
	EndPortIn DD



*--- DEh	システム予約
	PortIn DE
	st.b	d1					*  6
	
	rts						* 
	EndPortIn DE



*--- DFh	システム予約
	PortIn DF
	st.b	d1					*  6
	
	rts						* 
	EndPortIn DF



*--- E0h	システム予約
	PortIn E0
	st.b	d1					*  6
	
	rts						* 
	EndPortIn E0



*--- E1h	システム予約
	PortIn E1
	st.b	d1					*  6
	
	rts						* 
	EndPortIn E1



*--- E2h	システム予約
	PortIn E2
	st.b	d1					*  6
	
	rts						* 
	EndPortIn E2



*--- E3h	システム予約
	PortIn E3
	st.b	d1					*  6
	
	rts						* 
	EndPortIn E3



*--- E4h	システム予約
	PortIn E4
	st.b	d1					*  6
	
	rts						* 
	EndPortIn E4



*--- E5h	システム予約
	PortIn E5
	st.b	d1					*  6
	
	rts						* 
	EndPortIn E5



*--- E6h	システム予約
	PortIn E6
	st.b	d1					*  6
	
	rts						* 
	EndPortIn E6



*--- E7h	システム予約
	PortIn E7
	st.b	d1					*  6
	
	rts						* 
	EndPortIn E7



*--- E8h	システム予約
	PortIn E8
	st.b	d1					*  6
	
	rts						* 
	EndPortIn E8



*--- E9h	システム予約
	PortIn E9
	st.b	d1					*  6
	
	rts						* 
	EndPortIn E9



*--- EAh	システム予約
	PortIn EA
	st.b	d1					*  6
	
	rts						* 
	EndPortIn EA



*--- EBh	システム予約
	PortIn EB
	st.b	d1					*  6
	
	rts						* 
	EndPortIn EB



*--- ECh	システム予約
	PortIn EC
	st.b	d1					*  6
	
	rts						* 
	EndPortIn EC



*--- EDh	システム予約
	PortIn ED
	st.b	d1					*  6
	
	rts						* 
	EndPortIn ED



*--- EEh	システム予約
	PortIn EE
	st.b	d1					*  6
	
	rts						* 
	EndPortIn EE



*--- EFh	システム予約
	PortIn EF
	st.b	d1					*  6
	
	rts						* 
	EndPortIn EF



*--- F0h	システム予約
	PortIn F0
	st.b	d1					*  6
	
	rts						* 
	EndPortIn F0



*--- F1h	システム予約
	PortIn F1
	st.b	d1					*  6
	
	rts						* 
	EndPortIn F1



*--- F2h	システム予約
	PortIn F2
	st.b	d1					*  6
	
	rts						* 
	EndPortIn F2



*--- F3h	VDPの表示モード (MSX2+)
	PortIn F3
	st.b	d1					*  6
	
	rts						* 
	EndPortIn F3



*--- F4h	ハードウェアリセット (MSX2+)
	PortIn F4
	st.b	d1					*  6
	
	rts						* 
	EndPortIn F4



*--- F5h	システムコントロール (Writeのみ)
	PortIn F5
	st.b	d1					*  6
	
	rts						* 
	EndPortIn F5



*--- F6h	カラーバス I/O
	PortIn F6
	st.b	d1					*  6
	
	rts						* 
	EndPortIn F6



*--- F7h	A/V コントロール
	PortIn F7
	st.b	d1					*  6
	
	rts						* 
	EndPortIn F7



*--- F8h	システム予約
	PortIn F8
	st.b	d1					*  6
	
	rts						* 
	EndPortIn F8



*--- F9h	システム予約
	PortIn F9
	st.b	d1					*  6
	
	rts						* 
	EndPortIn F9



*--- FAh	システム予約
	PortIn FA
	st.b	d1					*  6
	
	rts						* 
	EndPortIn FA



*--- FBh	システム予約
	PortIn FB
	st.b	d1					*  6
	
	rts						* 
	EndPortIn FB



*--- FCh	メモリマッパー (Writeのみ) : ページ０のセグメント選択
	PortIn FC
	st.b	d1					*  6
	
	rts						* 
	EndPortIn FC



*--- FDh	メモリマッパー (Writeのみ) : ページ１のセグメント選択
	PortIn FD
	st.b	d1					*  6
	
	rts						* 
	EndPortIn FD



*--- FEh	メモリマッパー (Writeのみ) : ページ２のセグメント選択
	PortIn FE
	st.b	d1					*  6
	
	rts						* 
	EndPortIn FE



*--- FFh	メモリマッパー (Writeのみ) : ページ３のセグメント選択
	PortIn FF
	st.b	d1					*  6
	
	rts						* 
	EndPortIn FF




*----------------------------------------------------------------------------------------------
*---
	PortOut 00		* 00h	ユーザー定義
	rts					* 16
	EndPortOut 00
	
*---
	PortOut 01		* 01h	ユーザー定義
	rts					* 16
	EndPortOut 01
	
*---
	PortOut 02		* 02h	ユーザー定義
	rts					* 16
	EndPortOut 02
	
*---
	PortOut 03		* 03h	ユーザー定義
	rts					* 16
	EndPortOut 03
	
*---
	PortOut 04		* 04h	ユーザー定義
	rts					* 16
	EndPortOut 04
	
*---
	PortOut 05		* 05h	ユーザー定義
	rts					* 16
	EndPortOut 05
	
*---
	PortOut 06		* 06h	ユーザー定義
	rts					* 16
	EndPortOut 06
	
*---
	PortOut 07		* 07h	ユーザー定義
	rts					* 16
	EndPortOut 07
	
*---
	PortOut 08		* 08h	ユーザー定義
	rts					* 16
	EndPortOut 08
	
*---
	PortOut 09		* 09h	ユーザー定義
	rts					* 16
	EndPortOut 09
	
*---
	PortOut 0A		* 0Ah	ユーザー定義
	rts					* 16
	EndPortOut 0A
	
*---
	PortOut 0B		* 0Bh	ユーザー定義
	rts					* 16
	EndPortOut 0B
	
*---
	PortOut 0C		* 0Ch	ユーザー定義
	rts					* 16
	EndPortOut 0C
	
*---
	PortOut 0D		* 0Dh	ユーザー定義
	rts					* 16
	EndPortOut 0D
	
*---
	PortOut 0E		* 0Eh	ユーザー定義
	rts					* 16
	EndPortOut 0E
	
*---
	PortOut 0F		* 0Fh	ユーザー定義
	rts					* 16
	EndPortOut 0F
	
*---
	PortOut 10		* 10h	ユーザー定義
	rts					* 16
	EndPortOut 10
	
*---
	PortOut 11		* 11h	ユーザー定義
	rts					* 16
	EndPortOut 11
	
*---
	PortOut 12		* 12h	ユーザー定義
	rts					* 16
	EndPortOut 12
	
*---
	PortOut 13		* 13h	ユーザー定義
	rts					* 16
	EndPortOut 13
	
*---
	PortOut 14		* 14h	ユーザー定義
	rts					* 16
	EndPortOut 14
	
*---
	PortOut 15		* 15h	ユーザー定義
	rts					* 16
	EndPortOut 15
	
*---
	PortOut 16		* 16h	ユーザー定義
	rts					* 16
	EndPortOut 16
	
*---
	PortOut 17		* 17h	ユーザー定義
	rts					* 16
	EndPortOut 17
	
*---
	PortOut 18		* 18h	ユーザー定義
	rts					* 16
	EndPortOut 18
	
*---
	PortOut 19		* 19h	ユーザー定義
	rts					* 16
	EndPortOut 19
	
*---
	PortOut 1A		* 1Ah	ユーザー定義
	rts					* 16
	EndPortOut 1A
	
*---
	PortOut 1B		* 1Bh	ユーザー定義
	rts					* 16
	EndPortOut 1B
	
*---
	PortOut 1C		* 1Ch	ユーザー定義
	rts					* 16
	EndPortOut 1C
	
*---
	PortOut 1D		* 1Dh	ユーザー定義
	rts					* 16
	EndPortOut 1D
	
*---
	PortOut 1E		* 1Eh	ユーザー定義
	rts					* 16
	EndPortOut 1E
	
*---
	PortOut 1F		* 1Fh	ユーザー定義
	rts					* 16
	EndPortOut 1F
	
*---
	PortOut 20		* 20h	ユーザー定義
	rts					* 16
	EndPortOut 20
	
*---
	PortOut 21		* 21h	ユーザー定義
	rts					* 16
	EndPortOut 21
	
*---
	PortOut 22		* 22h	ユーザー定義
	rts					* 16
	EndPortOut 22
	
*---
	PortOut 23		* 23h	ユーザー定義
	rts					* 16
	EndPortOut 23
	
*---
	PortOut 24		* 24h	ユーザー定義
	rts					* 16
	EndPortOut 24
	
*---
	PortOut 25		* 25h	ユーザー定義
	rts					* 16
	EndPortOut 25
	
*---
	PortOut 26		* 26h	ユーザー定義
	rts					* 16
	EndPortOut 26
	
*---
	PortOut 27		* 27h	ユーザー定義
	rts					* 16
	EndPortOut 27
	
*---
	PortOut 28		* 28h	ユーザー定義
	rts					* 16
	EndPortOut 28
	
*---
	PortOut 29		* 29h	ユーザー定義
	rts					* 16
	EndPortOut 29
	
*---
	PortOut 2A		* 2Ah	ユーザー定義
	rts					* 16
	EndPortOut 2A
	
*---
	PortOut 2B		* 2Bh	ユーザー定義
	rts					* 16
	EndPortOut 2B
	
*---
	PortOut 2C		* 2Ch	ユーザー定義
	rts					* 16
	EndPortOut 2C
	
*---
	PortOut 2D		* 2Dh	ユーザー定義
	rts					* 16
	EndPortOut 2D
	
*---
	PortOut 2E		* 2Eh	ユーザー定義
	rts					* 16
	EndPortOut 2E
	
*---
	PortOut 2F		* 2Fh	ユーザー定義
	rts					* 16
	EndPortOut 2F
	
*---
	PortOut 30		* 30h	ユーザー定義
	rts					* 16
	EndPortOut 30
	
*---
	PortOut 31		* 31h	ユーザー定義
	rts					* 16
	EndPortOut 31
	
*---
	PortOut 32		* 32h	ユーザー定義
	rts					* 16
	EndPortOut 32
	
*---
	PortOut 33		* 33h	ユーザー定義
	rts					* 16
	EndPortOut 33
	
*---
	PortOut 34		* 34h	ユーザー定義
	rts					* 16
	EndPortOut 34
	
*---
	PortOut 35		* 35h	ユーザー定義
	rts					* 16
	EndPortOut 35
	
*---
	PortOut 36		* 36h	ユーザー定義
	rts					* 16
	EndPortOut 36
	
*---
	PortOut 37		* 37h	ユーザー定義
	rts					* 16
	EndPortOut 37
	
*---
	PortOut 38		* 38h	ユーザー定義
	rts					* 16
	EndPortOut 38
	
*---
	PortOut 39		* 39h	ユーザー定義
	rts					* 16
	EndPortOut 39
	
*---
	PortOut 3A		* 3Ah	ユーザー定義
	rts					* 16
	EndPortOut 3A
	
*---
	PortOut 3B		* 3Bh	ユーザー定義
	rts					* 16
	EndPortOut 3B
	
*---
	PortOut 3C		* 3Ch	ユーザー定義
	rts					* 16
	EndPortOut 3C
	
*---
	PortOut 3D		* 3Dh	ユーザー定義
	rts					* 16
	EndPortOut 3D
	
*---
	PortOut 3E		* 3Eh	ユーザー定義
	rts					* 16
	EndPortOut 3E
	
*---
	PortOut 3F		* 3Fh	ユーザー定義
	rts					* 16
	EndPortOut 3F
	
*---
	PortOut 40		* 40h	拡張I/O
	rts					* 16
	EndPortOut 40
	
*---
	PortOut 41		* 41h	拡張I/O
	rts					* 16
	EndPortOut 41
	
*---
	PortOut 42		* 42h	拡張I/O
	rts					* 16
	EndPortOut 42
	
*---
	PortOut 43		* 43h	拡張I/O
	rts					* 16
	EndPortOut 43
	
*---
	PortOut 44		* 44h	拡張I/O
	rts					* 16
	EndPortOut 44
	
*---
	PortOut 45		* 45h	拡張I/O
	rts					* 16
	EndPortOut 45
	
*---
	PortOut 46		* 46h	拡張I/O
	rts					* 16
	EndPortOut 46
	
*---
	PortOut 47		* 47h	拡張I/O
	rts					* 16
	EndPortOut 47
	
*---
	PortOut 48		* 48h	拡張I/O
	rts					* 16
	EndPortOut 48
	
*---
	PortOut 49		* 49h	拡張I/O
	rts					* 16
	EndPortOut 49
	
*---
	PortOut 4A		* 4Ah	拡張I/O
	rts					* 16
	EndPortOut 4A
	
*---
	PortOut 4B		* 4Bh	拡張I/O
	rts					* 16
	EndPortOut 4B
	
*---
	PortOut 4C		* 4Ch	拡張I/O
	rts					* 16
	EndPortOut 4C
	
*---
	PortOut 4D		* 4Dh	拡張I/O
	rts					* 16
	EndPortOut 4D
	
*---
	PortOut 4E		* 4Eh	拡張I/O
	rts					* 16
	EndPortOut 4E
	
*---
	PortOut 4F		* 4Fh	拡張I/O
	rts					* 16
	EndPortOut 4F
	
*---
	PortOut 50		* 50h	システム予約
	rts					* 16
	EndPortOut 50
	
*---
	PortOut 51		* 51h	システム予約
	rts					* 16
	EndPortOut 51
	
*---
	PortOut 52		* 52h	システム予約
	rts					* 16
	EndPortOut 52
	
*---
	PortOut 53		* 53h	システム予約
	rts					* 16
	EndPortOut 53
	
*---
	PortOut 54		* 54h	システム予約
	rts					* 16
	EndPortOut 54
	
*---
	PortOut 55		* 55h	システム予約
	rts					* 16
	EndPortOut 55
	
*---
	PortOut 56		* 56h	システム予約
	rts					* 16
	EndPortOut 56
	
*---
	PortOut 57		* 57h	システム予約
	rts					* 16
	EndPortOut 57
	
*---
	PortOut 58		* 58h	システム予約
	rts					* 16
	EndPortOut 58
	
*---
	PortOut 59		* 59h	システム予約
	rts					* 16
	EndPortOut 59
	
*---
	PortOut 5A		* 5Ah	システム予約
	rts					* 16
	EndPortOut 5A
	
*---
	PortOut 5B		* 5Bh	システム予約
	rts					* 16
	EndPortOut 5B
	
*---
	PortOut 5C		* 5Ch	システム予約
	rts					* 16
	EndPortOut 5C
	
*---
	PortOut 5D		* 5Dh	システム予約
	rts					* 16
	EndPortOut 5D
	
*---
	PortOut 5E		* 5Eh	システム予約
	rts					* 16
	EndPortOut 5E
	
*---
	PortOut 5F		* 5Fh	システム予約
	rts					* 16
	EndPortOut 5F
	
*---
	PortOut 60		* 60h	システム予約
	rts					* 16
	EndPortOut 60
	
*---
	PortOut 61		* 61h	システム予約
	rts					* 16
	EndPortOut 61
	
*---
	PortOut 62		* 62h	システム予約
	rts					* 16
	EndPortOut 62
	
*---
	PortOut 63		* 63h	システム予約
	rts					* 16
	EndPortOut 63
	
*---
	PortOut 64		* 64h	システム予約
	rts					* 16
	EndPortOut 64
	
*---
	PortOut 65		* 65h	システム予約
	rts					* 16
	EndPortOut 65
	
*---
	PortOut 66		* 66h	システム予約
	rts					* 16
	EndPortOut 66
	
*---
	PortOut 67		* 67h	システム予約
	rts					* 16
	EndPortOut 67
	
*---
	PortOut 68		* 68h	システム予約
	rts					* 16
	EndPortOut 68
	
*---
	PortOut 69		* 69h	システム予約
	rts					* 16
	EndPortOut 69
	
*---
	PortOut 6A		* 6Ah	システム予約
	rts					* 16
	EndPortOut 6A
	
*---
	PortOut 6B		* 6Bh	システム予約
	rts					* 16
	EndPortOut 6B
	
*---
	PortOut 6C		* 6Ch	システム予約
	rts					* 16
	EndPortOut 6C
	
*---
	PortOut 6D		* 6Dh	システム予約
	rts					* 16
	EndPortOut 6D
	
*---
	PortOut 6E		* 6Eh	システム予約
	rts					* 16
	EndPortOut 6E
	
*---
	PortOut 6F		* 6Fh	システム予約
	rts					* 16
	EndPortOut 6F
	
*---
	PortOut 70		* 70h	MIDIサウルス (BIT2)
	rts					* 16
	EndPortOut 70
	
*---
	PortOut 71		* 71h	MIDIサウルス (BIT2)
	rts					* 16
	EndPortOut 71
	
*---
	PortOut 72		* 72h	MIDIサウルス (BIT2)
	rts					* 16
	EndPortOut 72
	
*---
	PortOut 73		* 73h	MIDIサウルス (BIT2)
	rts					* 16
	EndPortOut 73
	
*---
	PortOut 74		* 74h	システム予約
	rts					* 16
	EndPortOut 74
	
*---
	PortOut 75		* 75h	システム予約
	rts					* 16
	EndPortOut 75
	
*---
	PortOut 76		* 76h	システム予約
	rts					* 16
	EndPortOut 76
	
*---
	PortOut 77		* 77h	システム予約
	rts					* 16
	EndPortOut 77
	
*---
	PortOut 78		* 78h	システム予約
	rts					* 16
	EndPortOut 78
	
*---
	PortOut 79		* 79h	システム予約
	rts					* 16
	EndPortOut 79
	
*---
	PortOut 7A		* 7Ah	システム予約
	rts					* 16
	EndPortOut 7A
	
*---
	PortOut 7B		* 7Bh	システム予約
	rts					* 16
	EndPortOut 7B
	
*---
	PortOut 7C		* 7Ch	MSX-MUSIC
	rts					* 16
	EndPortOut 7C
	
*---
	PortOut 7D		* 7Dh	MSX-MUSIC
	rts					* 16
	EndPortOut 7D
	
*---
	PortOut 7E		* 7Eh	システム予約
	rts					* 16
	EndPortOut 7E
	
*---
	PortOut 7F		* 7Fh	システム予約
	rts					* 16
	EndPortOut 7F
	
*---
	PortOut 80		* 80h	RS-232C : 8251 データ
	rts					* 16
	EndPortOut 80
	
*---
	PortOut 81		* 81h	RS-232C : 8251 ステータス・コマンド
	rts					* 16
	EndPortOut 81
	
*---
	PortOut 82		* 82h	RS-232C : ステータスリード・インタラプトマスク
	rts					* 16
	EndPortOut 82
	
*---
	PortOut 83		* 83h	RS-232C : 未使用
	rts					* 16
	EndPortOut 83
	
*---
	PortOut 84		* 84h	RS-232C : 8253
	rts					* 16
	EndPortOut 84
	
*---
	PortOut 85		* 85h	RS-232C : 8253
	rts					* 16
	EndPortOut 85
	
*---
	PortOut 86		* 86h	RS-232C : 8253
	rts					* 16
	EndPortOut 86
	
*---
	PortOut 87		* 87h	RS-232C : 8253
	rts					* 16
	EndPortOut 87
	
*---
	PortOut 88		* 88h	MSX1にV9938をのせたときのI/O
	rts					* 16
	EndPortOut 88
	
*---
	PortOut 89		* 89h	MSX1にV9938をのせたときのI/O
	rts					* 16
	EndPortOut 89
	
*---
	PortOut 8A		* 8Ah	MSX1にV9938をのせたときのI/O
	rts					* 16
	EndPortOut 8A
	
*---
	PortOut 8B		* 8Bh	MSX1にV9938をのせたときのI/O
	rts					* 16
	EndPortOut 8B
	
*---
	PortOut 8C		* 8Ch	MSX MODEM
	rts					* 16
	EndPortOut 8C
	
*---
	PortOut 8D		* 8Dh	MSX MODEM
	rts					* 16
	EndPortOut 8D
	
*---
	PortOut 8E		* 8Eh	システム予約
	rts					* 16
	EndPortOut 8E
	
*---
	PortOut 8F		* 8Fh	システム予約
	rts					* 16
	EndPortOut 8F
	
*---
	PortOut 90		* 90h	プリンタポート : ビット 0 ストローブ出力 (Write)
	rts					* 16
	EndPortOut 90
	
*---
	PortOut 91		* 91h	プリンタポート : ビット 1 ステータス入力 (Read)
	rts					* 16
	EndPortOut 91
	
*---
	PortOut 92		* 92h	システム予約
	rts					* 16
	EndPortOut 92
	
*---
	PortOut 93		* 93h	システム予約
	rts					* 16
	EndPortOut 93
	
*---
	PortOut 94		* 94h	システム予約
	rts					* 16
	EndPortOut 94
	
*---
	PortOut 95		* 95h	システム予約
	rts					* 16
	EndPortOut 95
	
*---
	PortOut 96		* 96h	システム予約
	rts					* 16
	EndPortOut 96
	
*---
	PortOut 97		* 97h	システム予約
	rts					* 16
	EndPortOut 97



;--- 98h	VDP (V9938) MSX2 : VRAM アクセス
;		d0 ... data
	PortOut 98
	;-- 同一データかチェック
	cmp.b	(regVadr),d0				*  8
	beq.s	@f					* 10/ 8 (T/F)
	
	;-- データ書き込みは各VRAM処理が行う
	
	; 書き込んだアドレスにより処理を振り分ける (256バイト単位で判定)
	move.w	regVadr,d1				*  4
	clr.b	d1					*  4
.if VRAM_LOW
	move.w	VRAM_BLOCK_LOW(regZjmp,d1.w),d1		* 14
.else
	move.w	VRAM_BLOCK_HIGH(regZjmp,d1.w),d1	* 14
.endif
	jmp	VRAM_WRITE(regZjmp,d1.l)		* 14


@@:
	;-- 同一データ書き込み時
	addq.w	#1,regVadr				*  8

.if	MSX1screen
	move.w	regVadr,d0				*  4
	andi.w	#%0011_1111_1111_1111,d0		*  8
	bne.s	@f					* 10/ 8 (T/F)
	lea	-$4000(regVadr),regVadr			*  8
@@:
	rts						* 16
.else
	move.w	regVadr,d0				*  4
	bne.s	@f					* 10/ 8 (T/F)
	
.if VRAM_LOW
	.if TEXT1
		lea	TXT1_H_IOroutine,regIO		* 12
	.elseif TEXT2
		lea	TXT2_H_IOroutine,regIO		* 12
	.elseif MULTI_COLOR
		lea	MLT_H_IOroutine,regIO		* 12
	.elseif GRAPHIC1
		lea	GRA1_H_IOroutine,regIO		* 12
	.elseif GRAPHIC2
		lea	GRA2_H_IOroutine,regIO		* 12
	.elseif GRAPHIC3
		lea	GRA3_H_IOroutine,regIO		* 12
	.elseif GRAPHIC4
		lea	GRA4_H_IOroutine,regIO		* 12
	.elseif GRAPHIC5
		lea	GRA5_H_IOroutine,regIO		* 12
	.elseif GRAPHIC6
		lea	GRA6_H_IOroutine,regIO		* 12
	.elseif GRAPHIC7
		lea	GRA7_H_IOroutine,regIO		* 12
	.endif
.else
	.if TEXT1
		lea	TXT1_L_IOroutine,regIO		* 12
	.elseif TEXT2
		lea	TXT2_L_IOroutine,regIO		* 12
	.elseif MULTI_COLOR
		lea	MLT_L_IOroutine,regIO		* 12
	.elseif GRAPHIC1
		lea	GRA1_L_IOroutine,regIO		* 12
	.elseif GRAPHIC2
		lea	GRA2_L_IOroutine,regIO		* 12
	.elseif GRAPHIC3
		lea	GRA3_L_IOroutine,regIO		* 12
	.elseif GRAPHIC4
		lea	GRA4_L_IOroutine,regIO		* 12
	.elseif GRAPHIC5
		lea	GRA5_L_IOroutine,regIO		* 12
	.elseif GRAPHIC6
		lea	GRA6_L_IOroutine,regIO		* 12
	.elseif GRAPHIC7
		lea	GRA7_L_IOroutine,regIO		* 12
	.endif
	
	movea.l	VRAM(regFtbl),regVadr			* 16
.endif
	
@@:
	rts						* 16
.endif
	EndPortOut 98



;--- 99h	VDP (V9938) MSX2 : コマンドレジスタアクセス
;		d0 ... data
	PortOut 99
	not.b	VDPport1_dataset(regFtbl)		* 16
	beq.s	@f					* 10/ 8 (分岐あり/なし)
	
	*-- port1 data
	move.b	d0,VDPport1_data(regFtbl)		* 12
	
	rts						* 16
	
	
	*-- port1 set
@@:
	tst.b	d0					*  4
	bpl.s	1f					* 10/ 8 (分岐あり/なし)
	
	add.b	d0,d0					*  4
	add.b	d0,d0					*  4
	bcs.s	@f					* 10/ 8 (分岐あり/なし)
	
	* 80 : コントロールレジスタへの書き込み
	move.b	d0,(regZeroSwap)			*  8
	move.w	(regZeroSwap),d1			*  8
	move.b	VDPport1_data(regFtbl),d0		* 12
	
	jmp	PROC_VDPREG(regIO,d1.w)			* 14
	
	
@@:
	* c0 : 謎のデータ
	rts						* 16
	
	
1:	*-- アドレスカウンタの設定
	move.b	d0,VDPport1_data-1(regFtbl)		* 12
	move.w	VDPport1_data-1(regFtbl),d1		* 12
	andi.w	#%0011_1111_1111_1111,d1		*  8
	
	* 40, 00 : 書き込み/読み込みアドレスカウンタの設定
	move.l	regVadr,d0				*  4
	andi.w	#%1100_0000_0000_0000,d0		*  8
	or.w	d1,d0					*  4
	movea.l	d0,regVadr				*  4
	
.if MSX1screen
	rts						* 16
.else
	; 設定アドレス毎の処理 (256バイト単位で判定)
	clr.b	d0					*  4
	.if VRAM_LOW
		move.w	VRAM_BLOCK_LOW(regZjmp,d0.w),d1	* 14
	.else
		move.w	VRAM_BLOCK_HIGH(regZjmp,d0.w),d1	* 14
	.endif
	jmp	VRAM_SET_ADR(regZjmp,d1.l)		* 14
.endif
	EndPortOut 99



;--- 9Ah	VDP (V9938) MSX2 : パレットレジスタアクセス (Writeのみ)
;		VDPreg_16 .. パレット番号
;		d0.b ... data
	PortOut 9A
	not.b	VDPpalette_dataset(regFtbl)		* 16
	beq.s	@f					* 10/ 8 (T/F)
	
	;-- Red Blue 成分
	add.b	d0,d0					*  4
	ext.w	d0					*  4
	lea	paletteConvTable_RB(regFtbl),a0		*  8
	move.w	(a0,d0.w),VDPpalette_data(regFtbl)	* 22
	
	rts						* 16
	
	
@@:	* set pallet
	*  d1.b : Green 成分
	add.b	d0,d0					*  4
	ext.w	d0					*  4
	lea	paletteConvTable_G(regFtbl),a0		*  8
	move.w	(a0,d0.w),d2				* 14
	or.w	VDPpalette_data(regFtbl),d2		* 12
	
	;-- パレットテーブルへ保存
	move.b	VDPreg_16(regFtbl),d0			* 12
	andi.w	#%0000_0000_0001_1110,d0		*  8
	lea	paletteTbl(regFtbl),a1			*  8
	move.w	d2,(a1,d0.w)				* 14
	
	;-- 次のパレットへ
	addq.b	#2,VDPreg_16(regFtbl)			* 16
	
.if	TEXT1
	; a1   ... paletteTbl
	; d0.w ... ﾊﾟﾚｯﾄ番号 << 2
	; d2.w ... ﾊﾟﾚｯﾄﾃﾞｰﾀ
	

.elseif	TEXT2
	; a1   ... paletteTbl
	; d0.w ... ﾊﾟﾚｯﾄ番号 << 2
	; d2.w ... ﾊﾟﾚｯﾄﾃﾞｰﾀ
	

.elseif	MULTI_COLOR
	; a1   ... paletteTbl
	; d0.w ... ﾊﾟﾚｯﾄ番号 << 2
	; d2.w ... ﾊﾟﾚｯﾄﾃﾞｰﾀ
	

.elseif	GRAPHIC1
	; a1   ... paletteTbl
	; d0.w ... ﾊﾟﾚｯﾄ番号 << 2
	; d2.w ... ﾊﾟﾚｯﾄﾃﾞｰﾀ
	
	clr.b	ColorTblUpdate(regFtbl)			* 
	
.elseif	GRAPHIC2.or.GRAPHIC3
	; a1   ... paletteTbl
	; d0.w ... ﾊﾟﾚｯﾄ番号 << 2
	; d2.w ... ﾊﾟﾚｯﾄﾃﾞｰﾀ
	
	lea	TPALETTE,a0				* 12
	move.w	d2,16*2(a0,d0.w)			* 
	
	lea	GPALETTE,a1				* 12
	move.w	d2,(a1,d0.w)				* 
	
	;d0.w*2 * 16
	lsl.w	#4,d0					* 
	move.w	d2,2(a0,d0.w)				* 
	
.elseif	GRAPHIC4	* 256x212, 16色,4画面
	; a1   ... paletteTbl
	; d0.w ... ﾊﾟﾚｯﾄ番号 << 2
	; d2.w ... ﾊﾟﾚｯﾄﾃﾞｰﾀ
	
	lea	GPALETTE,a0				* 12
	
	move.w	d2,(a0,d0.w)				* 

.elseif	GRAPHIC5	* 512x212,  4色,4画面
	; a1   ... paletteTbl
	; d0.w ... ﾊﾟﾚｯﾄ番号 << 2
	; d2.w ... ﾊﾟﾚｯﾄﾃﾞｰﾀ
	
	lea	GPALETTE,a0				* 12
	
	move.w	d2,(a0,d0.w)				* 
	move.w	d2,4*2(a0,d0.w)				* 
	move.w	d2,8*2(a0,d0.w)				* 
	move.w	d2,12*2(a0,d0.w)			* 

.elseif GRAPHIC6	* 512x212, 16色,2画面
	; a1   ... paletteTbl
	; d0.w ... ﾊﾟﾚｯﾄ番号 << 2
	; d2.w ... ﾊﾟﾚｯﾄﾃﾞｰﾀ
	
	lea	GPALETTE,a0				* 12
	
	move.w	d2,(a0,d0.w)				* 

.elseif	GRAPHIC7	* 256x212,256色,2画面
	; a1   ... paletteTbl
	; d0.w ... ﾊﾟﾚｯﾄ番号 << 2
	; d2.w ... ﾊﾟﾚｯﾄﾃﾞｰﾀ
	

.endif
	
	rts						* 16
	EndPortOut 9A



;--- 9Bh	VDP (V9938) MSX2 : レジスタ間接指定 (Writeのみ)
;		d0.b ... data
	PortOut 9B
	move.w	VDPreg_17(regFtbl),d1			* 12
	bmi.s	@f					* 10/ 8 (T/F)
	
	;-- ｵｰﾄｲﾝｸﾘﾒﾝﾄ
	move.w	d1,d2					*  4
	add.w	regZjmp,d2				*  4
	andi.w	#%0011_1111_0000_0000,d2		*  8
	move.w	d2,VDPreg_17(regFtbl)			* 12
@@:
	add.w	d1,d1					*  4
	add.w	d1,d1					*  4
	
	;-- ﾚｼﾞｽﾀ #17 は変更できない
	cmpi.w	#%0100_0100_0000_0000,d1		*  8
	beq.s	@f					* 10/ 8 (T/F)
	
	jmp	PROC_VDPREG(regIO,d1.w)			* 22
	
@@:	rts
	EndPortOut 9B



*---
	PortOut 9C		* 9Ch	システム予約
	rts						* 16
	EndPortOut 9C
	
*---
	PortOut 9D		* 9Dh	システム予約
	rts						* 16
	EndPortOut 9D
	
*---
	PortOut 9E		* 9Eh	システム予約
	rts						* 16
	EndPortOut 9E
	
*---
	PortOut 9F		* 9Fh	システム予約
	rts						* 16
	EndPortOut 9F



*--- A0h	サウンドジェネレータ (AY-3-8910) : アドレスラッチ
;		d0.b ... data
	PortOut A0
	andi.w	#%0000_1111,d0				*  8

.ifdef DEBUG_PSG
	cmpi.b	#$0e,d0
	bcc.s	@f

	move.l	d0,-(sp)
	
	move.b	9f(pc,d0.w),d2
	move.w	d2,-(sp)
	.dc.w	$ff02
	move.w	#':',-(sp)
	.dc.w	$ff02
	addq.w	#4,sp
	
	move.l	(sp)+,d0
@@:
.endif


	add.b	d0,d0					*  4
	move.b	d0,PSGreg+1(regZjmp)			* 
	
	rts						* 16

.ifdef DEBUG_PSG
9:	.dc.b	'0123456789abcdef'
.endif

	EndPortOut A0



*--- A1h	サウンドジェネレータ (AY-3-8910) : データライト
;		d0.b ... data
	PortOut A1
	move.w	PSGreg(regZjmp),d1			* 12


.ifdef DEBUG_PSG
	cmpi.b	#$0e*2,d1
	bcc.s	@f

	move.b	d0,d2
	lsr.b	#4,d2
	andi.w	#$000f,d2
	move.b	9f(pc,d2.w),d2
	move.l	d0,-(sp)
	move.w	d2,-(sp)
	.dc.w	$ff02
	addq.w	#2,sp
	move.l	(sp)+,d0

	move.b	d0,d2
	andi.w	#$000f,d2
	move.b	9f(pc,d2.w),d2
	move.l	d0,-(sp)
	move.w	d2,-(sp)
	.dc.w	$ff02
	addq.w	#2,sp
	move.l	(sp)+,d0

	move.l	d0,-(sp)
	move.w	#':',-(sp)
	.dc.w	$ff02
	addq.w	#2,sp
	move.l	(sp)+,d0
@@:
.endif

	move.w	16*2(regFtbl,d1.l),d1			* 
	jmp	4(regFtbl,d1.l)				* 

.ifdef DEBUG_PSG
9:	.dc.b	'0123456789abcdef'
.endif

	EndPortOut A1



*--- A2h	サウンドジェネレータ (AY-3-8910) : データリード
	PortOut A2
	rts						* 16
	EndPortOut A2



*--- A3h	システム予約
	PortOut A3
	rts						* 16
	EndPortOut A3
	
*---
	PortOut A4		* A4h	システム予約
	rts						* 16
	EndPortOut A4
	
*---
	PortOut A5		* A5h	システム予約
	rts						* 16
	EndPortOut A5
	
*---
	PortOut A6		* A6h	システム予約
	rts						* 16
	EndPortOut A6
	
*---
	PortOut A7		* A7h	システム予約
	rts						* 16
	EndPortOut A7



;--- A8h	パラレルポート (8255) : ポート A
; 基本スロット切り替え
;		d0.b ... data (3322_1100)
	PortOut A8
	cmp.b	IOdata_A8(regZjmp),d0			* 12
	beq.s	@f					* 10/ 8 (T/F)
	
	*-- 出力値保存
	move.b	d0,d1					*  4
	move.b	d1,IOdata_A8(regZjmp)			* 12
	
;;;	jmp	changeSlot(regFtbl)			* 10
	
	move.w	ChangeSlotRoutine(regZjmp),d0		* 12
	jmp	4(regFtbl,d0.w)				* 
	
@@:	rts						* 16
	EndPortOut A8



;--- A9h	パラレルポート (8255) : ポート B  キーボードリターン信号
;		d0.b ... data
	PortOut A9
	rts						* 16
	EndPortOut A9



;--- AAh	パラレルポート (8255) : ポート C  キーボードスキャン信号
;						  カセットコントロール
;						  CAPS ランプ信号 (L で点灯)
;						  ソフトによるサウンド出力
;						  (キーボードのクリックオン)
;		d0.b ... data
	PortOut AA
	move.b	d0,PPIportC(regZjmp)			* 12
	
	;-- CAPS key
	moveq.l	#%0100_0000,d1				*  4
	and.b	d0,d1					*  4
	beq.s	@f					* 10/ 8 (T/F)
	bset.b	#3,keyboard_LED(regFtbl)		* 16
	bra	1f					* 10
@@:
	bclr.b	#3,keyboard_LED(regFtbl)		* 16
1:
	
	;--
	andi.w	#%0000_1111,d0				*  8
	move.w	d0,KeyScanGroup(regZjmp)		* 12
	
	
	rts						* 16
	EndPortOut AA



*---
* ABh	パラレルポート (8255) : モードセット
*		d0.b ... data
	PortOut AB
	asr.b	#1,d0					*  8
	bmi.s	9f					* 10/ 8
	bcs.s	1f					* 10/ 8 (T/F)
	
	;--
	andi.b	#%0000_0111,d0				*  8
	bclr.b	d0,PPIportC(regZjmp)			* 
	
	cmpi.b	#6,d0					*  8
	bne.s	9f					* 10/ 8 (T/F)
	bclr.b	#3,keyboard_LED(regFtbl)		* 16
	
	rts						* 16
	
1:	;--
	andi.b	#%0000_0111,d0				*  8
	bset.b	d0,PPIportC(regZjmp)			* 
	
	cmpi.b	#6,d0					*  8
	bne.s	9f					* 10/ 8 (T/F)
	bset.b	#3,keyboard_LED(regFtbl)		* 16
9:
	rts						* 16
	EndPortOut AB



*---
	PortOut AC		* ACh	MSX ENGINE (1チップMSX I/O)
	rts					* 16
	EndPortOut AC
	
*---
	PortOut AD		* ADh	MSX ENGINE (1チップMSX I/O)
	rts					* 16
	EndPortOut AD
	
*---
	PortOut AE		* AEh	MSX ENGINE (1チップMSX I/O)
	rts					* 16
	EndPortOut AE
	
*---
	PortOut AF		* AFh	MSX ENGINE (1チップMSX I/O)
	rts					* 16
	EndPortOut AF
	
*---
	PortOut B0		* B0h	拡張メモリ (SONY仕様, 8255) : PORT A ADDRESS (A0〜A7)
	rts					* 16
	EndPortOut B0
	
*---
	PortOut B1		* B1h	拡張メモリ (SONY仕様, 8255) : PORT B ADDRESS (A8〜A10,
				*				    : A13〜A15), コントロール, 
				*				    : Read/Write
	rts					* 16
	EndPortOut B1
	
*---
	PortOut B2		* B2h	拡張メモリ (SONY仕様, 8255) : PORT C ADDRESS (A11〜A12)
				* 				    : データ (D0〜D7)
	rts					* 16
	EndPortOut B2
	
*---
	PortOut B3		* B3h	拡張メモリ (SONY仕様, 8255) : モードセット
	rts					* 16
	EndPortOut B3



;--- B4h	CLOCK-IC (RP-5C01) : アドレスラッチ
;		d0.b ... data
	PortOut B4
	and.w	#%0000_1111,d0				*  8
	move.w	d0,ClockIC_adr(regZjmp)			* 12
	
	rts						* 16
	EndPortOut B4



;--- B5h	CLOCK-IC (RP-5C01) : データ
;		d0.b ... data
	PortOut B5
	and.w	#%0000_1111,d0				*  8
	move.w	ClockIC_adr(regZjmp),d1			* 12
	cmpi.w	#13,d1					* 
	beq.s	@f					* 10/ 8 (T/F)
	
	*-- データ書き込み
	lea	ClockIC_memory(regFtbl),a0		*  8
	adda.w	ClockIC_block(regZjmp),a0		* 
	adda.w	d1,a0					*  8
	
	move.b	d0,(a0)					*  8
	
	rts						* 16
	
@@:	*-- モードセット
	move.w	d0,ClockIC_modeReg(regZjmp)		* 12
	
	and.w	#%0000_0011,d0				*  8
	lsl.w	#4,d0					* 16
	move.w	d0,ClockIC_block(regZjmp)		* 12
	
	rts						* 16
	EndPortOut B5



*---
	PortOut B6		* B6h	システム予約
	rts					* 16
	EndPortOut B6
	
*---
	PortOut B7		* B7h	システム予約
	rts					* 16
	EndPortOut B7
	
*---
	PortOut B8		* B8h	ライトペンコントロール (三洋電機仕様) : Read/Write
	rts					* 16
	EndPortOut B8
	
*---
	PortOut B9		* B9h	ライトペンコントロール (三洋電機仕様) : Read/Write
	rts					* 16
	EndPortOut B9
	
*---
	PortOut BA		* BAh	ライトペンコントロール (三洋電機仕様) : Read/Write
	rts					* 16
	EndPortOut BA
	
*---
	PortOut BB		* BBh	ライトペンコントロール (三洋電機仕様) : Writeのみ
	rts					* 16
	EndPortOut BB
	
*---
	PortOut BC		* BCh	VHDコントロール (JVC, 8255) : PORT A
	rts					* 16
	EndPortOut BC
	
*---
	PortOut BD		* BDh	VHDコントロール (JVC, 8255) : PORT B
	rts					* 16
	EndPortOut BD
	
*---
	PortOut BE		* BEh	VHDコントロール (JVC, 8255) : PORT C
	rts					* 16
	EndPortOut BE
	
*---
	PortOut BF		* BFh	VHDコントロール (JVC, 8255) : モードセット
	rts					* 16
	EndPortOut BF
	
*---
	PortOut C0		* C0h	MSX-AUDIO
	rts					* 16
	EndPortOut C0
	
*---
	PortOut C1		* C1h	MSX-AUDIO
	rts					* 16
	EndPortOut C1
	
*---
	PortOut C2		* C2h	システム予約
	rts					* 16
	EndPortOut C2
	
*---
	PortOut C3		* C3h	システム予約
	rts					* 16
	EndPortOut C3
	
*---
	PortOut C4		* C4h	システム予約
	rts					* 16
	EndPortOut C4
	
*---
	PortOut C5		* C5h	システム予約
	rts					* 16
	EndPortOut C5
	
*---
	PortOut C6		* C6h	システム予約
	rts					* 16
	EndPortOut C6
	
*---
	PortOut C7		* C7h	システム予約
	rts					* 16
	EndPortOut C7
	
*---
	PortOut C8		* C8h	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	rts					* 16
	EndPortOut C8
	
*---
	PortOut C9		* C9h	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	rts					* 16
	EndPortOut C9
	
*---
	PortOut CA		* CAh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	rts					* 16
	EndPortOut CA
	
*---
	PortOut CB		* CBh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	rts					* 16
	EndPortOut CB
	
*---
	PortOut CC		* CCh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	rts					* 16
	EndPortOut CC
	
*---
	PortOut CD		* CDh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	rts					* 16
	EndPortOut CD
	
*---
	PortOut CE		* CEh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	rts					* 16
	EndPortOut CE
	
*---
	PortOut CF		* CFh	MSX-INTERFACE (非同期シリアル通信インターフェイス)
	rts					* 16
	EndPortOut CF
	
*---
	PortOut D0		* D0h	フロッピィディスクコントローラ (FDC)
	rts					* 16
	EndPortOut D0
	
*---
	PortOut D1		* D1h	フロッピィディスクコントローラ (FDC)
	rts					* 16
	EndPortOut D1
	
*---
	PortOut D2		* D2h	フロッピィディスクコントローラ (FDC)
	rts					* 16
	EndPortOut D2
	
*---
	PortOut D3		* D3h	フロッピィディスクコントローラ (FDC)
	rts					* 16
	EndPortOut D3
	
*---
	PortOut D4		* D4h	フロッピィディスクコントローラ (FDC)
	rts					* 16
	EndPortOut D4
	
*---
	PortOut D5		* D5h	フロッピィディスクコントローラ (FDC)
	rts					* 16
	EndPortOut D5
	
*---
	PortOut D6		* D6h	フロッピィディスクコントローラ (FDC)
	rts					* 16
	EndPortOut D6
	
*---
	PortOut D7		* D7h	フロッピィディスクコントローラ (FDC)
	rts					* 16
	EndPortOut D7
	
*---
	PortOut D8		* D8h	漢字ROM (東芝仕様) 第１水準 : b5〜b0 下位アドレス (W)
	rts					* 16
	EndPortOut D8
	
*---
	PortOut D9		* D9h	漢字ROM (東芝仕様) 第１水準 : b5〜b0 上位アドレス (W)
				*                                   : b7〜b0 データ (R)
	rts					* 16
	EndPortOut D9
	
*---
	PortOut DA		* DAh	漢字ROM 第２水準
	rts					* 16
	EndPortOut DA
	
*---
	PortOut DB		* DBh	漢字ROM 第２水準
	rts					* 16
	EndPortOut DB
	
*---
	PortOut DC		* DCh	システム予約
	rts					* 16
	EndPortOut DC
	
*---
	PortOut DD		* DDh	システム予約
	rts					* 16
	EndPortOut DD
	
*---
	PortOut DE		* DEh	システム予約
	rts					* 16
	EndPortOut DE
	
*---
	PortOut DF		* DFh	システム予約
	rts					* 16
	EndPortOut DF
	
*---
	PortOut E0		* E0h	システム予約
	rts					* 16
	EndPortOut E0
	
*---
	PortOut E1		* E1h	システム予約
	rts					* 16
	EndPortOut E1
	
*---
	PortOut E2		* E2h	システム予約
	rts					* 16
	EndPortOut E2
	
*---
	PortOut E3		* E3h	システム予約
	rts					* 16
	EndPortOut E3
	
*---
	PortOut E4		* E4h	システム予約
	rts					* 16
	EndPortOut E4
	
*---
	PortOut E5		* E5h	システム予約
	rts					* 16
	EndPortOut E5
	
*---
	PortOut E6		* E6h	システム予約
	rts					* 16
	EndPortOut E6
	
*---
	PortOut E7		* E7h	システム予約
	rts					* 16
	EndPortOut E7
	
*---
	PortOut E8		* E8h	システム予約
	rts					* 16
	EndPortOut E8
	
*---
	PortOut E9		* E9h	システム予約
	rts					* 16
	EndPortOut E9
	
*---
	PortOut EA		* EAh	システム予約
	rts					* 16
	EndPortOut EA
	
*---
	PortOut EB		* EBh	システム予約
	rts					* 16
	EndPortOut EB
	
*---
	PortOut EC		* ECh	システム予約
	rts					* 16
	EndPortOut EC
	
*---
	PortOut ED		* EDh	システム予約
	rts					* 16
	EndPortOut ED
	
*---
	PortOut EE		* EEh	システム予約
	rts					* 16
	EndPortOut EE
	
*---
	PortOut EF		* EFh	システム予約
	rts					* 16
	EndPortOut EF
	
*---
	PortOut F0		* F0h	システム予約
	rts					* 16
	EndPortOut F0
	
*---
	PortOut F1		* F1h	システム予約
	rts					* 16
	EndPortOut F1
	
*---
	PortOut F2		* F2h	システム予約
	rts					* 16
	EndPortOut F2
	
*---
	PortOut F3		* F3h	VDPの表示モード (MSX2+)
	rts					* 16
	EndPortOut F3
	
*---
	PortOut F4		* F4h	ハードウェアリセット (MSX2+)
	rts					* 16
	EndPortOut F4
	
*---
	PortOut F5		* F5h	システムコントロール (Writeのみ)
	rts					* 16
	EndPortOut F5
	
*---
	PortOut F6		* F6h	カラーバス I/O
	rts					* 16
	EndPortOut F6
	
*---
	PortOut F7		* F7h	A/V コントロール
	rts					* 16
	EndPortOut F7
	
*---
	PortOut F8		* F8h	システム予約
	rts					* 16
	EndPortOut F8
	
*---
	PortOut F9		* F9h	システム予約
	rts					* 16
	EndPortOut F9
	
*---
	PortOut FA		* FAh	システム予約
	rts					* 16
	EndPortOut FA
	
*---
	PortOut FB		* FBh	システム予約
	rts					* 16
	EndPortOut FB



;--- FCh	メモリマッパー (Writeのみ) : ページ０のセグメント選択
;		d0 ... data
	PortOut FC
	;-- マッパーがない場合はリターン
	tst.w	SegmentsMemMap(regFtbl)			* 12
	beq.s	1f					* 10/ 8 (T/F)
	
	;-- 同一セグメントの場合はリターン
	cmp.b	MapMemoryPage0+1(regZjmp),d0		* 12
	beq.s	1f					* 10/ 8 (T/F)
	
	;-- 選択されたセグメント番号の設定
	move.b	d0,MapMemoryPage0+1(regZjmp)		* 12
	
	;--
	move.w	ChangeMemMapRoutine_Page0(regZjmp),d1	* 12
	jmp	4(regFtbl,d1.w)				* 
	
.if 0
	;-- マップメモリのアドレス取得
	ext.w	d0					*  4
	add.w	d0,d0					*  4
	add.w	d0,d0					*  4
	lea	MemoryMapperTbl(regFtbl),a0		*  8
	movea.l	(a0,d0.w),a0				* 18
	
	;-- メモリマッパーは表に出ているか?
	move.w	SlotPage0(regZjmp),d0			* 12
	or.w	(regFtbl,d0.w),d0			* 14
	cmp.w	IdxMemMapPage0(regZjmp),d0		* 12
	bne.s	2f					* 10/ 8 (T/F)
	
	;-- 出ている場合はページコピー
	tst.b	O_CHKROM+ZADR_PAGE0(regZjmp)		* 12
	bne.s	@f					* 10/ 8 (T/F)
	jsr	copybackMapMemory_page0(regFtbl)	* 18
@@:
	jmp	changeMapMemory_page0(regFtbl)		* 10
	
2:	;-- 表に出ていない場合は、アドレスのみ設定
	move.w	IdxMemMapPage0(regZjmp),d0		* 12
	move.l	a0,SLOTINFO_ADR(regFtbl,d0.w)		* 18
	
	;-- ROM/RAM marker (=0:RAM)
	seq.b	SLOTINFO_TYPE(regFtbl,d0.w)		* 18

.endif

1:
	rts						* 16
	EndPortOut FC



;--- FDh	メモリマッパー (Writeのみ) : ページ１のセグメント選択
;		d0 ... data
	PortOut FD
	;-- マッパーがない場合はリターン
	tst.w	SegmentsMemMap(regFtbl)			* 12
	beq.s	1f					* 10/ 8 (T/F)
	
	;-- 同一セグメントの場合はリターン
	cmp.b	MapMemoryPage1(regZjmp),d0		* 12
	beq.s	1f					* 10/ 8 (T/F)
	
	;-- 選択されたセグメント番号の設定
	move.b	d0,MapMemoryPage1(regZjmp)		* 12
	
	;--
	move.w	ChangeMemMapRoutine_Page1(regZjmp),d1	* 12
	jmp	4(regFtbl,d1.w)				* 

.if 0
	;-- マップメモリのアドレス取得
	ext.w	d0					*  4
	add.w	d0,d0					*  4
	add.w	d0,d0					*  4
	lea	MemoryMapperTbl(regFtbl),a0		*  8
	movea.l	(a0,d0.w),a0				* 18
	
	;-- メモリマッパーは表に出ているか?
	move.w	SlotPage1(regZjmp),d0			* 12
	or.w	(regFtbl,d0.w),d0			* 14
	cmp.w	IdxMemMapPage1(regZjmp),d0		* 12
	bne.s	2f					* 10/ 8 (T/F)
	
	;-- 出ている場合はページコピー
	tst.b	O_CHKROM+ZADR_PAGE1(regZjmp)		* 12
	bne.s	@f					* 10/ 8 (T/F)
	jsr	copybackMapMemory_page1(regFtbl)	* 18
@@:
	jmp	changeMapMemory_page1(regFtbl)		* 10
	
2:	;-- 表に出ていない場合は、アドレスのみ設定
	move.w	IdxMemMapPage1(regZjmp),d0		* 12
	move.l	a0,SLOTINFO_ADR(regFtbl,d0.w)		* 18
	
	;-- ROM/RAM marker (=0:RAM)
	seq.b	SLOTINFO_TYPE(regFtbl,d0.w)		* 18

.endif

1:
	rts						* 16
	EndPortOut FD



;--- FEh	メモリマッパー (Writeのみ) : ページ２のセグメント選択
;		d0 ... data
	PortOut FE
	;-- マッパーがない場合はリターン
	tst.w	SegmentsMemMap(regFtbl)			* 12
	beq.s	1f					* 10/ 8 (T/F)
	
	;-- 同一セグメントの場合はリターン
	cmp.b	MapMemoryPage2(regZjmp),d0		* 12
	beq.s	1f					* 10/ 8 (T/F)
	
	;-- 選択されたセグメント番号の設定
	move.b	d0,MapMemoryPage2(regZjmp)		* 12
	
	;--
	move.w	ChangeMemMapRoutine_Page2(regZjmp),d1	* 12
	jmp	4(regFtbl,d1.w)				* 


.if 0
	;-- マップメモリのアドレス取得
	ext.w	d0					*  4
	add.w	d0,d0					*  4
	add.w	d0,d0					*  4
	lea	MemoryMapperTbl(regFtbl),a0		*  8
	movea.l	(a0,d0.w),a0				* 18
	
	;-- メモリマッパーは表に出ているか?
	move.w	SlotPage2(regZjmp),d0			* 12
	or.w	(regFtbl,d0.w),d0			* 14
	cmp.w	IdxMemMapPage2(regZjmp),d0		* 12
	bne.s	2f					* 10/ 8 (T/F)
	
	;-- 出ている場合はページコピー
	tst.b	O_CHKROM+ZADR_PAGE2(regZjmp)		* 12
	bne.s	@f					* 10/ 8 (T/F)
	jsr	copybackMapMemory_page2(regFtbl)	* 18
@@:
	jmp	changeMapMemory_page2(regFtbl)		* 10
	
2:	;-- 表に出ていない場合は、アドレスのみ設定
	move.w	IdxMemMapPage2(regZjmp),d0		* 12
	move.l	a0,SLOTINFO_ADR(regFtbl,d0.w)		* 18
	
	;-- ROM/RAM marker (=0:RAM)
	seq.b	SLOTINFO_TYPE(regFtbl,d0.w)		* 18

.endif

1:
	rts						* 16
	EndPortOut FE



;--- FFh	メモリマッパー (Writeのみ) : ページ３のセグメント選択
;		d0 ... data
	PortOut FF
	;-- マッパーがない場合はリターン
	tst.w	SegmentsMemMap(regFtbl)			* 12
	beq.s	1f					* 10/ 8 (T/F)
	
	;-- 同一セグメントの場合はリターン
	cmp.b	MapMemoryPage3(regZjmp),d0		* 12
	beq.s	1f					* 10/ 8 (T/F)
	
	;-- 選択されたセグメント番号の設定
	move.b	d0,MapMemoryPage3(regZjmp)		* 12
	
	;--
	move.w	ChangeMemMapRoutine_Page3(regZjmp),d1	* 12
	jmp	4(regFtbl,d1.w)				* 


.if 0
	;-- マップメモリのアドレス取得
	ext.w	d0					*  4
	add.w	d0,d0					*  4
	add.w	d0,d0					*  4
	lea	MemoryMapperTbl(regFtbl),a0		*  8
	movea.l	(a0,d0.w),a0				* 18
	
	;-- メモリマッパーは表に出ているか?
	move.w	SlotPage3(regZjmp),d0			* 12
	or.w	(regFtbl,d0.w),d0			* 14
	cmp.w	IdxMemMapPage3(regZjmp),d0		* 12
	bne.s	2f					* 10/ 8 (T/F)
	
	;-- 出ている場合はページコピー
	tst.b	O_CHKROM+ZADR_PAGE3(regZjmp)		* 12
	bne.s	@f					* 10/ 8 (T/F)
	jsr	copybackMapMemory_page3(regFtbl)	* 18
@@:
	jmp	changeMapMemory_page3(regFtbl)		* 10
	
2:	;-- 表に出ていない場合は、アドレスのみ設定
	move.w	IdxMemMapPage3(regZjmp),d0		* 12
	move.l	a0,SLOTINFO_ADR(regFtbl,d0.w)		* 18
	
	;-- ROM/RAM marker (=0:RAM)
	seq.b	SLOTINFO_TYPE(regFtbl,d0.w)		* 18

.endif

1:
	rts						* 16
	EndPortOut FF



*---




*----------------------------------------------------------------------------------------------


;--- Mode register 0
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | DG|IE2|IE1| M5| M4| M3| 0 |
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 0
	move.b	d0,VDPreg_0(regFtbl)			* 12
	
	* 水平帰線による割り込み (1:許可, 0:禁止)
	
	
	* VDPreg        0             1
	*	  0b0000_1110 : 0b0001_1000
	* MSX 1
	*	    xxxx_000x     xxx1_0xxx	TEXT 1      (SCREEN 0, 40字モード)
	*	    xxxx_000x     xxx0_1xxx	MULTI COLOR (SCREEN 3)
	*	    xxxx_000x     xxx0_0xxx	GRAPHIC 1   (SCREEN 1)
	*	    xxxx_001x     xxx0_0xxx	GRAPHIC 2   (SCREEN 2)
	* MSX 2
	*	    xxxx_010x     xxx1_0xxx	TEXT 2      (SCREEN 0, 80字モード)
	*	    xxxx_010x     xxx0_0xxx	GRAPHIC 3   (SCREEN 4)
	*	    xxxx_011x     xxx0_0xxx	GRAPHIC 4   (SCREEN 5)
	*	    xxxx_100x     xxx0_0xxx	GRAPHIC 5   (SCREEN 6)
	*	    xxxx_101x     xxx0_0xxx	GRAPHIC 6   (SCREEN 7)
	*	    xxxx_111x     xxx0_0xxx	GRAPHIC 7   (SCREEN 8)
	
	moveq.l	#%0001_1000,d1				*  4
	and.b	VDPreg_1(regFtbl),d1			* 12
	add.b	d1,d1					*  4
	andi.b	#%0000_1110,d0				*  8
	or.b	d0,d1					*  4
	
.if	TEXT1
	lea	TXT1_ScreenInitTbl(regFtbl),a0		*  8
.elseif	TEXT2
	lea	TXT2_ScreenInitTbl(regFtbl),a0		*  8
.elseif	MULTI_COLOR
	lea	MLT_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC1
	lea	GRA1_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC2
	lea	GRA2_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC3
	lea	GRA3_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC4
	lea	GRA4_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC5
	lea	GRA5_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC6
	lea	GRA6_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC7
	lea	GRA7_ScreenInitTbl(regFtbl),a0		*  8
.endif
	
	move.w	(a0,d1.w),d1				* 14
	beq.s	@f					* 10/ 8 (T/F)
	jmp	(regFtbl,d1.l)				* 14
@@:
	rts						* 16
	EndSetVDPreg 0



;--- Mode register 1
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | BL|IE0| M1| M2| 0 | SI|MAG|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 1
	move.b	d0,VDPreg_1(regFtbl)			* 12
	
	* 画面表示/非表示 (1:表示, 0:非表示)
	
	
	
	
	* 垂直帰線による割り込み (1:許可, 0:禁止)
	*  (垂直帰線割り込み処理内部で行う)
	
	* スプライトのサイズ - 未サポート
	
	* スプライトの拡大 - 未サポート
	
	
	* VDPreg        0             1
	*	  0b0000_1110 : 0b0001_1000
	* MSX 1
	*	    xxxx_000x     xxx1_0xxx	10000	TEXT 1      (SCREEN 0, 40字モード)
	*	    xxxx_000x     xxx0_1xxx	01000	MULTI COLOR (SCREEN 3)
	*	    xxxx_000x     xxx0_0xxx	00000	GRAPHIC 1   (SCREEN 1)
	*	    xxxx_001x     xxx0_0xxx	00001	GRAPHIC 2   (SCREEN 2)
	* MSX 2
	*	    xxxx_010x     xxx1_0xxx	10010	TEXT 2      (SCREEN 0, 80字モード)
	*	    xxxx_010x     xxx0_0xxx	00010	GRAPHIC 3   (SCREEN 4)
	*	    xxxx_011x     xxx0_0xxx	00011	GRAPHIC 4   (SCREEN 5)
	*	    xxxx_100x     xxx0_0xxx	00100	GRAPHIC 5   (SCREEN 6)
	*	    xxxx_101x     xxx0_0xxx	00101	GRAPHIC 6   (SCREEN 7)
	*	    xxxx_111x     xxx0_0xxx	00111	GRAPHIC 7   (SCREEN 8)
	
	andi.b	#%0001_1000,d0				*  8
	add.b	d0,d0					*  4
	moveq.l	#%0000_1110,d1				*  4
	and.b	VDPreg_0(regFtbl),d1			* 12
	or.b	d0,d1					*  4
	
.if	TEXT1
	lea	TXT1_ScreenInitTbl(regFtbl),a0		*  8
.elseif	TEXT2
	lea	TXT2_ScreenInitTbl(regFtbl),a0		*  8
.elseif	MULTI_COLOR
	lea	MLT_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC1
	lea	GRA1_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC2
	lea	GRA2_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC3
	lea	GRA3_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC4
	lea	GRA4_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC5
	lea	GRA5_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC6
	lea	GRA6_ScreenInitTbl(regFtbl),a0		*  8
.elseif	GRAPHIC7
	lea	GRA7_ScreenInitTbl(regFtbl),a0		*  8
.endif
	
	move.w	(a0,d1.w),d1				* 14
	beq.s	@f					* 10/ 8 (T/F)
	jmp	(regFtbl,d1.l)				* 14
@@:
	rts						* 16
	EndSetVDPreg 1





;--- Pattern name table base address register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 |A16|A15|A14|A13|A12|A11|A10|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 2
	cmp.b	VDPreg_2(regFtbl),d0			* 12
	beq.s	9f					* 10/ 8 (T/F)
	
	move.b	d0,VDPreg_2(regFtbl)			* 12
	
.if	TEXT1	* 1 Kbytes (4 blocks)
	;  +---+---+---+---+---+---+---+---+
	;  | 0 |A16|A15|A14|A13|A12|A11|A10|
	;  +---+---+---+---+---+---+---+---+
	
	;-- 変更前の PatNameTbl をクリア
	move.l	PatNameTbl(regFtbl),d0			* 16
	move.b	PatNameTbl_HL(regFtbl),d0		* 12
	lea	VRAM_BLOCK(regZjmp,d0.w),a0		* 12
	clr.b	d0					*  4
	jsr	SetVRAM_4(regFtbl)			* 18	d0.b = 0
	
	;-- 画面再描画
	move.b	d0,ScreenRefresh(regFtbl)		* 12	d0.b = 0
	
	;--
	move.w	VDPreg_2(regFtbl),d0			* 12
	add.w	d0,d0					*  4
	add.w	d0,d0					*  4
	bcs.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	bclr.l	#16,d0					*<14
	move.l	d0,PatNameTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_LOW,PatNameTbl_HL(regFtbl)	* 16
	
	jmp	TXT1_SetTable(regFtbl)			* 10

@@:
	;-- VRAM_HIGH
	bset.l	#16,d0					*<12
	move.l	d0,PatNameTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_HIGH,PatNameTbl_HL(regFtbl)	* 16
	
	jmp	TXT1_SetTable(regFtbl)			* 10
	
	
.elseif	TEXT2	* 4 Kbytes (16 blocks)
	;  +---+---+---+---+---+---+---+---+
	;  | 0 |A16|A15|A14|A13|A12|   |   |
	;  +---+---+---+---+---+---+---+---+
	
	;-- 変更前の PatNameTbl をクリア
	move.l	PatNameTbl(regFtbl),d0			* 16
	move.b	PatNameTbl_HL(regFtbl),d0		* 12
	lea	VRAM_BLOCK(regZjmp,d0.w),a0		* 12
	clr.b	d0					*  4
	jsr	SetVRAM_16(regFtbl)			* 18	d0.b = 0
	
	;-- 画面再描画
	move.b	d0,ScreenRefresh(regFtbl)		* 12	d0.b = 0
	
	;--
	move.w	VDPreg_2(regFtbl),d0			* 12
	andi.w	#%0111_1100_0000_0000,d0		*  8
	add.w	d0,d0					*  4
	add.w	d0,d0					*  4
	bcs.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	bclr.l	#16,d0					*<14
	move.l	d0,PatNameTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_LOW,PatNameTbl_HL(regFtbl)	* 16
	
	jmp	TXT2_SetTable(regFtbl)			* 10
	
@@:
	;-- VRAM_HIGH
	bset.l	#16,d0					*<12
	move.l	d0,PatNameTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_HIGH,PatNameTbl_HL(regFtbl)	* 16
	
	jmp	TXT2_SetTable(regFtbl)			* 10
	
	
.elseif	MULTI_COLOR	* 1 Kbytes (4 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 |A16|A15|A14|A13|A12|A11|A10|
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の PatNameTbl をクリア
	move.l	PatNameTbl(regFtbl),d0			* 16
	move.b	PatNameTbl_HL(regFtbl),d0		* 12
	lea	VRAM_BLOCK(regZjmp,d0.w),a0		* 12
	clr.b	d0					*  4
	jsr	SetVRAM_4(regFtbl)			* 18	d0.b = 0
	
	;-- 画面再描画
	move.b	d0,ScreenRefresh(regFtbl)		* 12	d0.b = 0
	
	;--
	move.w	VDPreg_2(regFtbl),d0			* 12
	add.w	d0,d0					*  4
	add.w	d0,d0					*  4
	bcs.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	bclr.l	#16,d0					*<14
	move.l	d0,PatNameTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_LOW,PatNameTbl_HL(regFtbl)	* 16
	
	jmp	MLT_SetTable(regFtbl)			* 10
	
@@:
	;-- VRAM_HIGH
	bset.l	#16,d0					*<12
	move.l	d0,PatNameTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_HIGH,PatNameTbl_HL(regFtbl)	* 16
	
	jmp	MLT_SetTable(regFtbl)			* 10
	
	
.elseif	GRAPHIC1	* 768 bytes (3 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 |A16|A15|A14|A13|A12|A11|A10|
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の PatNameTbl をクリア
	move.l	PatNameTbl(regFtbl),d0			* 16
	move.b	PatNameTbl_HL(regFtbl),d0		* 12
	lea	VRAM_BLOCK(regZjmp,d0.w),a0		* 12
	clr.b	d0					*  4
	jsr	SetVRAM_3(regFtbl)			* 18	d0.b = 0
	
	;-- 画面再描画
	move.b	d0,ScreenRefresh(regFtbl)		* 12	d0.b = 0
	
	;--
	move.w	VDPreg_2(regFtbl),d0			* 12
	add.w	d0,d0					*  4
	add.w	d0,d0					*  4
	bcs.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	bclr.l	#16,d0					*<14
	move.l	d0,PatNameTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_LOW,PatNameTbl_HL(regFtbl)	* 16
	
	jmp	GRA1_SetTable(regFtbl)			* 10

@@:
	;-- VRAM_HIGH
	bset.l	#16,d0					*<12
	move.l	d0,PatNameTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_HIGH,PatNameTbl_HL(regFtbl)	* 16
	
	jmp	GRA1_SetTable(regFtbl)			* 10
	
	
.elseif	GRAPHIC2.or.GRAPHIC3	* 1 Kbytes (4 blocks)
	;  +---+---+---+---+---+---+---+---+
	;  | 0 |A16|A15|A14|A13|A12|A11|A10|
	;  +---+---+---+---+---+---+---+---+
	
	;-- 変更前の PatNameTbl をクリア
	move.l	PatNameTbl(regFtbl),d0			* 16
	move.b	PatNameTbl_HL(regFtbl),d0		* 12
	lea	VRAM_BLOCK(regZjmp,d0.w),a0		* 12
	clr.b	d0					*  4
	jsr	SetVRAM_4(regFtbl)			* 18	d0.b = 0
	
	;-- 画面再描画
	move.b	d0,ScreenRefresh(regFtbl)		* 12	d0.b = 0
	
	;--
	move.w	VDPreg_2(regFtbl),d0			* 12
	add.w	d0,d0					*  4
	add.w	d0,d0					*  4
	bcs.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	bclr.l	#16,d0					*<14
	move.l	d0,PatNameTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_LOW,PatNameTbl_HL(regFtbl)	* 16
	
	.if GRAPHIC2
		jmp	GRA2_SetTable(regFtbl)		* 10
	.else
		jmp	GRA3_SetTable(regFtbl)		* 10
	.endif

@@:
	;-- VRAM_HIGH
	bset.l	#16,d0					*<12
	move.l	d0,PatNameTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_HIGH,PatNameTbl_HL(regFtbl)	* 16
	
	.if GRAPHIC2
		jmp	GRA2_SetTable(regFtbl)		* 10
	.else
		jmp	GRA3_SetTable(regFtbl)		* 10
	.endif
	
	
.elseif	GRAPHIC4.or.GRAPHIC5	* 32 Kbytes (128 blocks) ($00000, $08000, $10000, $18000)
	;  +---+---+---+---+---+---+---+---+
	;  | 0 |A16|A15|   |   |   |   |   |
	;  +---+---+---+---+---+---+---+---+
	
	andi.w	#%0110_0000,d0				*  8
	rol.b	#3,d0					* 12
	moveq.l	#%0000_0001,d1				*  4
	lsl.b	d0,d1					*  6+2n
	
	lea	VideoCtrl_R2+1,a0			* 12
	move.b	(a0),d0					*  8
	andi.b	#%1111_0000,d0				*  8
	or.b	d1,d0					*  4
	move.b	d0,(a0)					*  8
	
	rts						* 16
	
	
.elseif	GRAPHIC6.or.GRAPHIC7	* 64 Kbytes (256 blocks) ($00000, $10000)
	;  +---+---+---+---+---+---+---+---+
	;  | 0 |A16|   |   |   |   |   |   |
	;  +---+---+---+---+---+---+---+---+
	
	andi.w	#%0100_0000,d0				*  8
	rol.b	#3,d0					* 12
	moveq.l	#%0000_0011,d1				*  4
	lsl.b	d0,d1					*  6+2n
	
	lea	VideoCtrl_R2+1,a0			* 12
	move.b	(a0),d0					*  8
	andi.b	#%1111_0000,d0				*  8
	or.b	d1,d0					*  4
	move.b	d0,(a0)					*  8
	
	rts						* 16
.endif
	
9:
	rts						* 16
	EndSetVDPreg 2



*--- Color table base address register low
*
*	  7   6   5   4   3   2   1   0
*	+---+---+---+---+---+---+---+---+
*	|A13|A12|A11|A10| A9| A8| A7| A6|
*	+---+---+---+---+---+---+---+---+
*
*	d0.b ... data

	SetVDPreg 3
	cmp.b	VDPreg_3(regFtbl),d0			* 12
	beq.s	9f					* 10/ 8 (T/F)
	
	move.b	d0,VDPreg_3(regFtbl)			* 12
	
	
.if	TEXT1			* なし
	
	rts						* 16
	
	
.elseif	TEXT2			* 512 bytes (2 blocks)
	; +---+---+---+---+---+---+---+---+
	; |A13|A12|A11|A10| A9|   |   |   |
	; +---+---+---+---+---+---+---+---+
	
	andi.b	#%1111_1000,d1				*  8
	
	rts						* 16
	
	
.elseif	MULTI_COLOR		* なし
	
	rts						* 16
	
	
.elseif	GRAPHIC1		* 64 bytes (1/4 blocks)
	; +---+---+---+---+---+---+---+---+
	; |A13|A12|A11|A10| A9| A8| A7| A6|
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の ColorTbl をクリア
	move.l	ColorTbl(regFtbl),d0			* 16
	move.b	ColorTbl_HL(regFtbl),d0			* 12
	clr.b	VRAM_BLOCK(regZjmp,d0.w)		* 18
	
	;-- 画面再描画
	clr.b	ScreenRefresh(regFtbl)			* 16
	
	;--
	move.w	VDPreg_3(regFtbl),d1			* 12
	lsr.w	#2,d1					* 10
	andi.w	#%1100_0000_0000_0000,d0		*  8
	or.w	d1,d0					*  4
	move.w	d0,ColorTbl+2(regFtbl)			* 12
	
	;-- カラーテーブルアップデート
	movea.l	d0,a0					*  4
	lea	paletteTbl(regFtbl),a1			*  8
	
	move.l	a2,-(sp)				* 12
	lea	TPALETTE,a2				* 12
	
	moveq.l	#32-1,d1				*  4
@@:
	move.b	(a0)+,d2				*  8
	
	*-- パターンの０の部分の色コード
	moveq.l	#%0000_1111,d0				*  4
	and.w	d2,d0					*  4
	add.w	d0,d0					*  4
	move.w	(a1,d0.w),(a2)+				* 
	
	*-- パターンの１の部分の色コード
	andi.w	#%0000_0000_1111_0000,d2		*  8
	lsr.w	#3,d2					* 12
	move.w	(a1,d2.w),(a2)+				* 
	
	dbra	d1,@b					* 10/14 (T/F)
	
	move.l	(sp)+,a2				* 12
	
	
	jmp	GRA1_SetTable(regFtbl)			* 10
	
	
.elseif	GRAPHIC2.or.GRAPHIC3	* 8 Kbytes (32 blocks)
	; +---+---+---+---+---+---+---+---+
	; |A13|   |   |   |   |   |   |   |
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の ColorTbl をクリア
	move.l	ColorTbl(regFtbl),d0			* 16
	move.b	ColorTbl_HL(regFtbl),d0			* 12
	lea	VRAM_BLOCK(regZjmp,d0.w),a0		* 12
	clr.b	d0					*  4
	jsr	SetVRAM_32(regFtbl)			* 18	d0.b = 0
	
	*-- 画面の更新は垂直帰線割り込みで行う
	move.b	d0,ScreenRefresh(regFtbl)		* 12	d0.b = 0
	
	;--
	move.w	VDPreg_3(regFtbl),d1			* 12
	lsr.w	#2,d1					* 10
	andi.w	#%0010_0000_0000_0000,d1		*  8
	andi.w	#%1100_0000_0000_0000,d0		*  8
	or.w	d1,d0					*  4
	move.w	d0,ColorTbl+2(regFtbl)			* 12
	
	.if GRAPHIC2
		jmp	GRA2_SetTable(regFtbl)		* 10
	.else
		jmp	GRA3_SetTable(regFtbl)		* 10
	.endif
	
	
.elseif	GRAPHIC4		* なし
	
	rts						* 16
	
.elseif	GRAPHIC5		* なし
	
	rts						* 16
	
.elseif	GRAPHIC6		* なし
	
	rts						* 16
	
.elseif	GRAPHIC7		* なし
	
	rts						* 16
	
.endif

9:
	rts						* 16
	EndSetVDPreg 3



;--- Pattern generator table base address register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 |A16|A15|A14|A13|A12|A11|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 4
	cmp.b	VDPreg_4(regFtbl),d0			* 12
	beq.s	9f					* 10/ 8 (T/F)
	
	move.b	d0,VDPreg_4(regFtbl)			* 12
	
	
.if	TEXT1.or.TEXT2			* 2 Kbytes (8 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 |A16|A15|A14|A13|A12|A11|
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の PatGenTbl をクリア
	move.l	PatGenTbl(regFtbl),d0			* 16
	move.b	PatGenTbl_HL(regFtbl),d0		* 12
	lea	VRAM_BLOCK(regZjmp,d0.w),a0		* 12
	clr.b	d0					*  4
	jsr	SetVRAM_8(regFtbl)			* 18	d0.b = 0
	
	;-- 画面再描画
	move.b	d0,ScreenRefresh(regFtbl)		* 12	d0.b = 0
	
	*--
	move.w	VDPreg_4(regFtbl),d0			* 12
	lsl.w	#3,d0					* 12
	bcs.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	bclr.l	#16,d0					*<14
	move.l	d0,PatGenTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_LOW,PatGenTbl_HL(regFtbl)	* 16
	
	.if TEXT1
		jmp	TXT1_SetTable(regFtbl)		* 10
	.else
		jmp	TXT2_SetTable(regFtbl)		* 10
	.endif
	
@@:	;-- VRAM_HIGH
	bset.l	#16,d0					*<12
	move.l	d0,PatGenTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_HIGH,PatGenTbl_HL(regFtbl)	* 16
	
	.if TEXT1
		jmp	TXT1_SetTable(regFtbl)		* 10
	.else
		jmp	TXT2_SetTable(regFtbl)		* 10
	.endif
	
	
.elseif	MULTI_COLOR		* 2 Kbytes (8 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 |A16|A15|A14|A13|A12|A11|
	; +---+---+---+---+---+---+---+---+
	
	rts						* 16
	
.elseif	GRAPHIC1		* 2 Kbytes (8 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 |A16|A15|A14|A13|A12|A11|
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の PathGenTbl をクリア
	move.l	PatGenTbl(regFtbl),d0			* 16
	move.b	PatGenTbl_HL(regFtbl),d0		* 12
	lea	VRAM_BLOCK(regZjmp,d0.w),a0		* 12
	clr.b	d0					*  4
	jsr	SetVRAM_8(regFtbl)			* 18	d0.b = 0
	
	;-- 描画は垂直帰線割り込み処理で行う
	move.b	d0,ScreenRefresh(regFtbl)		* 12	d0.b = 0
	
	*--
	move.w	VDPreg_4(regFtbl),d0			* 12
	lsl.w	#3,d0					* 12
	bcs.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	bclr.l	#16,d0					*<14
	move.l	d0,PatGenTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_LOW,PatGenTbl_HL(regFtbl)	* 16
	
	jmp	GRA1_SetTable(regFtbl)			* 10
	
@@:	;-- VRAM_HIGH
	bset.l	#16,d0					*<12
	move.l	d0,PatGenTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_HIGH,PatGenTbl_HL(regFtbl)	* 16
	
	jmp	GRA1_SetTable(regFtbl)			* 10
	
	
.elseif	GRAPHIC2.or.GRAPHIC3	* 8 Kbytes (32 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 |A16|A15|A14|A13|   |   |
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の PatGenTbl をクリア
	move.l	PatGenTbl(regFtbl),d0			* 16
	move.b	PatGenTbl_HL(regFtbl),d0		* 12
	lea	VRAM_BLOCK(regZjmp,d0.w),a0		* 12
	clr.b	d0					*  4
	jsr	SetVRAM_32(regFtbl)			* 18	d0.b = 0
	
	*-- 画面の更新は垂直帰線割り込みで行う
	move.b	d0,ScreenRefresh(regFtbl)		* 12	d0.b = 0
	
	*--
	move.w	VDPreg_4(regFtbl),d0			* 12
	andi.w	#%0011_1100_0000_0000,d0		*  8
	lsl.w	#3,d0					* 12
	bcs.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	bclr.l	#16,d0					*<14
	move.l	d0,PatGenTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_LOW,PatGenTbl_HL(regFtbl)	* 16
	
	.if GRAPHIC2
		jmp	GRA2_SetTable(regFtbl)		* 10
	.else
		jmp	GRA3_SetTable(regFtbl)		* 10
	.endif
	
	
@@:	;-- VRAM_HIGH
	bset.l	#16,d0					*<12
	move.l	d0,PatGenTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_HIGH,PatGenTbl_HL(regFtbl)	* 16
	
	.if GRAPHIC2
		jmp	GRA2_SetTable(regFtbl)		* 10
	.else
		jmp	GRA3_SetTable(regFtbl)		* 10
	.endif
	
	
.elseif	GRAPHIC4		* なし
	
	rts						* 16
	
.elseif	GRAPHIC5		* なし
	
	rts						* 16
	
.elseif	GRAPHIC6		* なし
	
	rts						* 16
	
.elseif	GRAPHIC7		* なし
	
	rts						* 16
	
.endif
	
9:
	rts						* 16
	EndSetVDPreg 4



;--- Sprite attribute table base address register low
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|A14|A13|A12|A11|A10| A9| 1 | 1 |
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 5
	cmp.b	VDPreg_5(regFtbl),d0			* 12
	beq.s	9f					* 10/ 8 (T/F)
	
	move.b	d0,VDPreg_5(regFtbl)			* 12
	
	
.if	TEXT1		* なし
	
	rts						* 16
	
.elseif	TEXT2		* なし
	
	rts						* 16
	
.elseif	MULTI_COLOR		* mode 1 64 bytes (1/4 blocks)
	; +---+---+---+---+---+---+---+---+
	; |A14|A13|A12|A11|A10| A9| A8| A7|
	; +---+---+---+---+---+---+---+---+
	
	rts
	
.elseif GRAPHIC1.or.GRAPHIC2	* mode 1 64 bytes (1/4 blocks)
	; +---+---+---+---+---+---+---+---+
	; |A14|A13|A12|A11|A10| A9| A8| A7|
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の SprAtrTbl をクリア
	move.l	SprAtrTbl(regFtbl),d0			* 16
	move.b	SprAtrTbl_HL(regFtbl),d0		* 12
	clr.b	VRAM_BLOCK(regZjmp,d0.w)		* 18
	
	;-- 
	
	;--
	move.w	VDPreg_5(regFtbl),d1			* 12
	lsr.w	#1,d1					*  8
	andi.w	#%1000_0000_0000_0000,d0		*  8
	or.w	d1,d0					*  4
	
	move.l	d0,SprAtrTbl(regFtbl)			* 16
	
	clr.b	SprAtrTblUpdate(regFtbl)		* 
	
	.if GRAPHIC1
		jmp	GRA1_SetTable(regFtbl)		* 10
	.else
		jmp	GRA2_SetTable(regFtbl)		* 10
	.endif
	
	
.elseif	GRAPHIC3	* mode 2 
	
	rts						* 16
	
.elseif	GRAPHIC4	* mode 2 
	
	rts						* 16
	
.elseif	GRAPHIC5	* mode 2 
	
	rts						* 16
	
.elseif	GRAPHIC6	* mode 2 
	
	rts						* 16
	
.elseif	GRAPHIC7	* mode 2 
	
	rts						* 16
	
.endif
	
9:
	rts						* 16
	EndSetVDPreg 5



;--- Sprite pattern generator table base address register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 |A16|A15|A14|A13|A12|A11|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 6
	cmp.b	VDPreg_6(regFtbl),d0			* 12
	beq.s	9f					* 10/ 8 (T/F)
	
	move.b	d0,VDPreg_6(regFtbl)			* 12
	
.if	TEXT1		* なし
	
	rts						* 16
	
.elseif	TEXT2		* なし
	
	rts						* 16
	
.elseif	MULTI_COLOR	* 2 Kbytes (8 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 |A16|A15|A14|A13|A12|A11|
	; +---+---+---+---+---+---+---+---+
	
	rts						* 16
	
.elseif	GRAPHIC1.or.GRAPHIC2	* 2 Kbytes (8 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 |A16|A15|A14|A13|A12|A11|
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の SprPatGenTbl をクリア
	move.l	SprPatGenTbl(regFtbl),d0		* 16
	move.b	SprPatGenTbl_HL(regFtbl),d0		* 12
	clr.b	VRAM_BLOCK(regZjmp,d0.w)		* 18
	
	;--
	
	;--
	move.w	VDPreg_6(regFtbl),d0			* 12
	lsl.w	#3,d0					* 12
	bcs.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	bclr.l	#16,d0					*<14
	move.l	d0,SprPatGenTbl(regFtbl)		* 16
	move.b	#MARK_VRAM_LOW,SprPatGenTbl_HL(regFtbl)	* 16
	
	clr.b	SprPatGenTblUpdate(regFtbl)		* 
	
	.if GRAPHIC1
		jmp	GRA1_SetTable(regFtbl)		* 10
	.else
		jmp	GRA2_SetTable(regFtbl)		* 10
	.endif
	
	
@@:	;-- VRAM_HIGH
	bset.l	#16,d0					*<12
	move.l	d0,SprPatGenTbl(regFtbl)		* 16
	move.b	#MARK_VRAM_HIGH,SprPatGenTbl_HL(regFtbl)	* 16
	
	clr.b	SprPatGenTblUpdate(regFtbl)		* 
	
	.if GRAPHIC1
		jmp	GRA1_SetTable(regFtbl)		* 10
	.else
		jmp	GRA2_SetTable(regFtbl)		* 10
	.endif
	
	
.elseif	GRAPHIC3	* 2 Kbytes (8 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 |A16|A15|A14|A13|A12|A11|
	; +---+---+---+---+---+---+---+---+
	
	rts						* 16
	
.elseif	GRAPHIC4	* 2 Kbytes (8 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 |A16|A15|A14|A13|A12|A11|
	; +---+---+---+---+---+---+---+---+
	
	rts						* 16
	
.elseif	GRAPHIC5	* 2 Kbytes (8 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 |A16|A15|A14|A13|A12|A11|
	; +---+---+---+---+---+---+---+---+
	
	rts						* 16
	
.elseif	GRAPHIC6	* 2 Kbytes (8 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 |A16|A15|A14|A13|A12|A11|
	; +---+---+---+---+---+---+---+---+
	
	rts						* 16
	
.elseif	GRAPHIC7	* 2 Kbytes (8 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 |A16|A15|A14|A13|A12|A11|
	; +---+---+---+---+---+---+---+---+
	
	rts						* 16
	
.endif
	
9:
	rts						* 16
	EndSetVDPreg 6



;--- Text color / Back drop color register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|TC3|TC2|TC1|TC0|BD3|BD2|BD1|BD0|  (GRAPHIC 7 モード時以外)
;	+---+---+---+---+---+---+---+---+
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|BD7|BD6|BD5|BD5|BD3|BD2|BD1|BD0|  (GRAPHIC 7 モード時)
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 7
	move.b	d0,VDPreg_7(regFtbl)			* 12
	
.if TEXT1.or.TEXT2
	lea	TPALETTE,a0				* 12
	lea	paletteTbl(regFtbl),a1			*  8
	
	*-- ﾊﾟﾀｰﾝ 0 / Back drop color
	moveq.l	#%0000_1111,d1				*  4
	and.w	d0,d1					*  4
	add.w	d1,d1					*  4
	move.w	(a1,d1.w),(a0)				* 
	
	.if TEXT1
	move.w	(a1,d1.w),(GPALETTE+2)			* 
	.endif
	
	*-- Text color
	andi.w	#%0000_0000_1111_0000,d0		*  8
	lsr.w	#3,d0					* 12
	move.w	(a1,d0.w),2*15(a0)			* 
	
	
.elseif	GRAPHIC1
	lea	paletteTbl(regFtbl),a0			*  8
	
	*-- Back drop color
	moveq.l	#%0000_1111,d1				*  4
	and.w	d0,d1					*  4
	add.w	d1,d1					*  4
	move.w	(a0,d1.w),d0				* 
	
	;-- ﾊﾟﾚｯﾄ #0 は周辺色と同一
;;;	move.w	d0,(a0)					* 
	
	move.w	d0,(TPALETTE)				* 16
	move.w	d0,(GPALETTE+2)				* 16
.elseif GRAPHIC2
	lea	paletteTbl(regFtbl),a0			*  8
	
	*-- Back drop color
	moveq.l	#%0000_1111,d1				*  4
	and.w	d0,d1					*  4
	add.w	d1,d1					*  4
	move.w	(a0,d1.w),d0				* 
	
	;-- GRAPHIC2の場合、背景色は割り込みで設定する
	move.w	d0,GRA2_backDropColor(regFtbl)		* 
	
	;-- 周辺色
	move.w	d0,(TPALETTE+15*2)			* 
	
	;-- ブロック 1 バックドロップカラー
	move.w	d0,(TPALETTE+16*2)			* 
	
	;-- ブロック 2,3 バックドロップカラー
	move.w	d0,(GPALETTE)				* 16
.endif
	
	
	rts						* 16
	EndSetVDPreg 7



;--- Mode register 2
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| MS| LP| TP| CB| VR| 0 |SPD| BW|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 8
	move.b	d0,VDPreg_8(regFtbl)			* 12
	
	* TP : カラーコード０の色をカラーパレットの色にする
	
	* SPD : 1 = スプライト非表示, 0 = スプライト表示
	
.if	TEXT1.or.TEXT2
	
.elseif	MULTI_COLOR
	
.elseif	GRAPHIC1.or.GRAPHIC2.or.GRAPHIC3
	moveq.l	#%0000_0010,d1				*  4
	and.b	d0,d1					*  4
	
.elseif	GRAPHIC4.or.GRAPHIC5.or.GRAPHIC6.or.GRAPHIC7
	moveq.l	#%0000_0010,d1				*  4
	and.b	d0,d1					*  4
	
.endif
	
	rts						* 16
	EndSetVDPreg 8



;--- Mode register 3
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| LN| 0 | S1| S0| IL| EO| NT| DC|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 9
	move.b	d0,VDPreg_9(regFtbl)			* 12
	
	* LN : 1 = 縦212ドット表示, 0 = 縦192ドット表示
	
	* IL : 1 = Interlace, 0 = Non Interlace
	
	* EO : 1 = Even/Odd field で２枚の絵を交互に表示, 0 = Even/Odd field で同じ絵を表示
	
	
	rts						* 16
	EndSetVDPreg 9



;--- Color table base address register high
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | 0 |A16|A15|A14|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 10
	move.b	d0,VDPreg_10(regFtbl)			* 12
	
	
.if	TEXT1		* なし
	
	rts						* 16
	
.elseif	TEXT2		* 512 bytes (2 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 | 0 | 0 | 0 |A16|A15|A14|
	; +---+---+---+---+---+---+---+---+
	
	rts						* 16
	
.elseif	MULTI_COLOR	* なし
	
.elseif	GRAPHIC1	* 64 bytes (1/4 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 | 0 | 0 | 0 |A16|A15|A14|
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の ColorTbl をクリア
	move.l	ColorTbl(regFtbl),d0			* 16
	move.b	ColorTbl_HL(regFtbl),d0			* 12
	clr.b	VRAM_BLOCK(regZjmp,d0.w)		* 18
	
	;-- 画面再描画
	clr.b	ScreenRefresh(regFtbl)			* 16
	
	;--
	move.w	ColorTbl+2(regFtbl),d0			* 12
	andi.w	#%0011_1111_1111_1111,d0		*  8
	
	move.b	VDPreg_10(regFtbl),d1			* 12
	andi.w	#%0000_0111,d1				*  8
	ror.w	#2,d1					* 10
	tst.b	d1					*  4
	bne.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	or.w	d1,d0					*  4
	bclr.l	#16,d0					*<14
	move.l	d0,ColorTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_LOW,ColorTbl_HL(regFtbl)	* 16
	
	bra	1f					* 10
	
@@:	;-- VRAM_HIGH
	clr.b	d1					*  4
	or.w	d1,d0					*  4
	bset.l	#16,d0					*<12
	move.l	d0,ColorTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_HIGH,ColorTbl_HL(regFtbl)	* 16
	
1:
	jmp	GRA1_SetTable_withColor(regFtbl)	* 10
	
	
.elseif	GRAPHIC2.or.GRAPHIC3	* 8 Kbytes (32 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 | 0 | 0 | 0 |A16|A15|A14|
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の ColorTbl をクリア
	move.l	ColorTbl(regFtbl),d0			* 16
	move.b	ColorTbl_HL(regFtbl),d0			* 12
	clr.b	VRAM_BLOCK(regZjmp,d0.w)		* 18
	
	;-- 画面再描画
	clr.b	ScreenRefresh(regFtbl)			* 16
	
	;--
	move.w	ColorTbl+2(regFtbl),d0			* 12
	andi.w	#%0011_1111_1111_1111,d0		*  8
	
	move.b	VDPreg_10(regFtbl),d1			* 12
	andi.w	#%0000_0111,d1				*  8
	ror.w	#2,d1					* 10
	tst.b	d1					*  4
	bne.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	or.w	d1,d0					*  4
	bclr.l	#16,d0					*<14
	move.l	d0,ColorTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_LOW,ColorTbl_HL(regFtbl)	* 16
	
	.if GRAPHIC2
		jmp	GRA2_SetTable(regFtbl)		* 10
	.else
		jmp	GRA3_SetTable(regFtbl)		* 10
	.endif
	
	
@@:	;-- VRAM_HIGH
	clr.b	d1					*  4
	or.w	d1,d0					*  4
	bset.l	#16,d0					*<12
	move.l	d0,ColorTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_HIGH,ColorTbl_HL(regFtbl)	* 16
	
	.if GRAPHIC2
		jmp	GRA2_SetTable(regFtbl)		* 10
	.else
		jmp	GRA3_SetTable(regFtbl)		* 10
	.endif
	
	
.elseif	GRAPHIC4	* なし
	
	rts						* 16
	
.elseif	GRAPHIC5	* なし
	
	rts						* 16
	
.elseif	GRAPHIC6	* なし
	
	rts						 *16
	
.elseif	GRAPHIC7	* なし
	
	rts						* 16
	
.endif
	EndSetVDPreg 10



;--- Sprite attribute table base address register high
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | 0 | 0 |A16|A15|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 11
	move.b	d0,VDPreg_11(regFtbl)			* 12
	
	
.if	TEXT1		* なし
	
	rts						* 16
	
.elseif	TEXT2		* なし
	
	rts						* 16
	
.elseif	MULTI_COLOR	* mode 1 64 bytes (1/4 blocks)
	
	rts						* 16
	
.elseif	GRAPHIC1.or.GRAPHIC2	* mode 1 64 bytes (1/4 blocks)
	; +---+---+---+---+---+---+---+---+
	; | 0 | 0 | 0 | 0 | 0 | 0 |A16|A15|
	; +---+---+---+---+---+---+---+---+
	
	;-- 変更前の SprAtrTbl をクリア
	move.l	SprAtrTbl(regFtbl),d0			* 16
	move.b	SprAtrTbl_HL(regFtbl),d0		* 12
	clr.b	VRAM_BLOCK(regZjmp,d0.w)		* 18
	
	;--
	
	;--
	move.w	SprAtrTbl+2(regFtbl),d0			* 12
	andi.w	#%0111_1111_1111_1111,d0		*  8
	
	move.b	VDPreg_11(regFtbl),d1			* 12
	andi.w	#%0000_0011,d1				*  8
	ror.w	#1,d1					*  8
	tst.b	d1					*  4
	bne.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	or.w	d1,d0					*  4
	bclr.l	#16,d0					*<14
	move.l	d0,SprAtrTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_LOW,SprAtrTbl_HL(regFtbl)	* 16
	
	move.w	d1,SprAtrTblUpdate(regFtbl)		* 12
	
	.if GRAPHIC1
		jmp	GRA1_SetTable(regFtbl)		* 10
	.else
		jmp	GRA2_SetTable(regFtbl)		* 10
	.endif
	
	
@@:	;-- VRAM_HIGH
	clr.b	d1					*  4
	or.w	d1,d0					*  4
	bset.l	#16,d0					*<12
	move.l	d0,SprAtrTbl(regFtbl)			* 16
	move.b	#MARK_VRAM_HIGH,SprAtrTbl_HL(regFtbl)	* 16
	
	move.w	d1,SprAtrTblUpdate(regFtbl)		* 12
	
	.if GRAPHIC1
		jmp	GRA1_SetTable(regFtbl)		* 10
	.else
		jmp	GRA2_SetTable(regFtbl)		* 10
	.endif
	
	
.elseif	GRAPHIC3	* mode 2 
	
	rts						* 16
	
.elseif	GRAPHIC4	* mode 2 
	
	rts						* 16
	
.elseif	GRAPHIC5	* mode 2 
	
	rts						* 16
	
.elseif	GRAPHIC6	* mode 2 
	
	rts						* 16
	
.elseif	GRAPHIC7	* mode 2 
	
	rts						* 16
	
.endif
	EndSetVDPreg 11



;--- Text color / Back color register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|T23|T22|T21|T20|BC3|BC2|BC1|BC0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 12
	move.b	d0,VDPreg_12(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 12



;--- Blinking period register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|ON3|ON2|ON1|ON0|OF3|OF2|OF1|OF0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 13
	move.b	d0,VDPreg_13(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 13



;--- VRAM Access base address register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | 0 |A16|A15|A14|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 14
;	cmp.b	VDPreg_14(regFtbl),d0			* 12
;	beq.s	9f					* 10/ 8 (T/F)
	
	move.b	d0,VDPreg_14(regFtbl)			* 12
	
	moveq.l	#%0000_0111,d1				*  4
	and.w	d0,d1					*  4
	ror.w	#2,d1					* 10
	
	move.l	regVadr,d0				*  4
	andi.w	#%0011_1111_1111_1111,d0		*  8
	
	tst.b	d1					*  4
	bne.s	@f					* 10/ 8 (T/F)
	
	;-- VRAM_LOW
	or.w	d1,d0					*  4
	
.if VRAM_LOW
	
.else
	bchg.l	#16,d0					*<12
	
	.if TEXT1
		lea	TXT1_L_IOroutine,regIO		* 12
	.elseif TEXT2
		lea	TXT2_L_IOroutine,regIO		* 12
	.elseif MULTI_COLOR
		lea	MLT_L_IOroutine,regIO		* 12
	.elseif GRAPHIC1
		lea	GRA1_L_IOroutine,regIO		* 12
	.elseif GRAPHIC2
		lea	GRA2_L_IOroutine,regIO		* 12
	.elseif GRAPHIC3
		lea	GRA3_L_IOroutine,regIO		* 12
	.elseif GRAPHIC4
		lea	GRA4_L_IOroutine,regIO		* 12
	.elseif GRAPHIC5
		lea	GRA5_L_IOroutine,regIO		* 12
	.elseif GRAPHIC6
		lea	GRA6_L_IOroutine,regIO		* 12
	.elseif GRAPHIC7
		lea	GRA7_L_IOroutine,regIO		* 12
	.endif
.endif
	
	movea.l	d0,regVadr				*  4
	
.if MSX1screen
	rts						* 16
.else
	clr.b	d0					*  4
	move.w	VRAM_BLOCK_LOW(regZjmp,d0.w),d1		* 14
	jmp	VRAM_SET_ADR(regZjmp,d1.l)		* 14
.endif
	
	
@@:	;-- VRAM_HIGH
	clr.b	d1					*  4
	or.w	d1,d0					*  4
	
.if VRAM_LOW
	bchg.l	#16,d0					*<12
	
	.if TEXT1
		lea	TXT1_H_IOroutine,regIO		* 12
	.elseif TEXT2
		lea	TXT2_H_IOroutine,regIO		* 12
	.elseif MULTI_COLOR
		lea	MLT_H_IOroutine,regIO		* 12
	.elseif GRAPHIC1
		lea	GRA1_H_IOroutine,regIO		* 12
	.elseif GRAPHIC2
		lea	GRA2_H_IOroutine,regIO		* 12
	.elseif GRAPHIC3
		lea	GRA3_H_IOroutine,regIO		* 12
	.elseif GRAPHIC4
		lea	GRA4_H_IOroutine,regIO		* 12
	.elseif GRAPHIC5
		lea	GRA5_H_IOroutine,regIO		* 12
	.elseif GRAPHIC6
		lea	GRA6_H_IOroutine,regIO		* 12
	.elseif GRAPHIC7
		lea	GRA7_H_IOroutine,regIO		* 12
	.endif
.else
	
.endif
	
	movea.l	d0,regVadr				*  4
	
.if MSX1screen
	rts						* 16
.else
	clr.b	d0					*  4
	move.w	VRAM_BLOCK_HIGH(regZjmp,d0.w),d1	* 14
	jmp	VRAM_SET_ADR(regZjmp,d1.l)		* 14
.endif
	
9:
	rts						* 10/ 8 (T/F)
	EndSetVDPreg 14



;--- Status register pointer
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | S3| S2| S1| S0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 15
	lsl.b	#4,d0					* 14
	move.b	d0,VDPreg_15(regFtbl)			* 12
	
	rts						* 16
	EndSetVDPreg 15



;--- Color palette address register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | C3| C2| C1| C0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 16
	andi.b	#%0000_1111,d0				*  8
	add.b	d0,d0					*  4
	move.b	d0,VDPreg_16(regFtbl)			* 12
	
	rts						* 16
	EndSetVDPreg 16



;--- Control register pointer
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|AII| 0 | R5| R4| R3| R2| R1| R0|
;	+---+---+---+---+---+---+---+---+
;
;	d0 ... data

	SetVDPreg 17
	move.b	d0,VDPreg_17(regFtbl)			* 12
	
	rts						* 16
	EndSetVDPreg 17



;--- Display adjust register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| V3| V2| V1| V0| H3| H2| H1| H0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 18
	move.b	d0,VDPreg_18(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 18



;--- Interrupt line register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|IL7|IL6|IL5|IL4|IL3|IL2|IL1|IL0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 19
	move.b	d0,VDPreg_19(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 19



;--- Color burst register 1
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 20
	move.b	d0,VDPreg_20(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 20



;--- Color burst register 2
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 1 | 1 | 1 | 0 | 1 | 1 |
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 21
	move.b	d0,VDPreg_21(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 21



;--- Color burst register 3
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | 0 | 1 | 0 | 1 |
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 22
	move.b	d0,VDPreg_22(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 22



;--- Display offset register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|DO7|DO6|DO5|DO4|DO3|DO2|DO1|DO0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 23
	move.b	d0,VDPreg_23(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 23



;--- 未使用
	SetVDPreg 24
	rts						* 16
	EndSetVDPreg 24



;--- 未使用
	SetVDPreg 25
	rts						* 16
	EndSetVDPreg 25



;--- 未使用
	SetVDPreg 26
	rts						* 16
	EndSetVDPreg 26



;--- 未使用
	SetVDPreg 27
	rts						* 16
	EndSetVDPreg 27



;--- 未使用
	SetVDPreg 28
	rts						* 16
	EndSetVDPreg 28



;--- 未使用
	SetVDPreg 29
	rts						* 16
	EndSetVDPreg 29



;--- 未使用
	SetVDPreg 30
	rts						* 16
	EndSetVDPreg 30



;--- 未使用
	SetVDPreg 31
	rts						* 16
	EndSetVDPreg 31



;--- Source X low register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|SX7|SX6|SX5|SX4|SX3|SX2|SX1|SX0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 32
	move.b	d0,VDPreg_32(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 32



;--- Source X high register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | 0 | 0 | 0 |SX8|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 33
	andi.b	#%0000_0001,d0				*  8
	move.b	d0,VDPreg_33(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 33



;--- Source Y low register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|SY7|SY6|SY5|SY4|SY3|SY2|SY1|SY0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 34
	move.b	d0,VDPreg_34(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 34



;--- Source Y high register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | 0 | 0 |SY9|SY8|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 35
	andi.b	#%0000_0011,d0				*  8
	move.b	d0,VDPreg_35(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 35



;--- Destination X low register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|DX7|DX6|DX5|DX4|DX3|DX2|DX1|DX0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 36
	move.b	d0,VDPreg_36(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 36



;--- Destination X high register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | 0 | 0 | 0 |DX8|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 37
	andi.b	#%0000_0001,d0				*  8
	move.b	d0,VDPreg_37(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 37



;--- Destination Y low register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|DY7|DY6|DY5|DY4|DY3|DY2|DY1|DY0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 38
	move.b	d0,VDPreg_38(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 38



;--- Destination Y high register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | 0 | 0 |DY9|DY8|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 39
	andi.b	#%0000_0011,d0				*  8
	move.b	d0,VDPreg_39(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 39



;--- Number of dot X low register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|NX7|NX6|NX5|NX4|NX3|NX2|NX1|NX0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 40
	move.b	d0,VDPreg_40(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 40



;--- Number of dot X high register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | 0 | 0 | 0 |NX8|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 41
	andi.b	#%0000_0011,d0				*  8
	move.b	d0,VDPreg_41(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 41



;--- Number of dot Y low register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|NY7|NY6|NY5|NY4|NY3|NY2|NY1|NY0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 42
	move.b	d0,VDPreg_42(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 42



;--- Number of dot Y high register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 | 0 | 0 | 0 | 0 | 0 |NY9|NY8|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 43
	andi.b	#%0000_0011,d0				*  8
	move.b	d0,VDPreg_43(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 43



;--- Color register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|CH3|CH2|CH1|CH0|CL3|CL2|CL1|CL0|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 44
	move.b	d0,VDPreg_44(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 44



;--- Argument register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	| 0 |MXC|MXD|MXS|DIY|DIX| EQ|MAJ|
;	+---+---+---+---+---+---+---+---+
;
;	d0.b ... data

	SetVDPreg 45
	move.b	d0,VDPreg_45(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 45



;--- Command register
;
;	  7   6   5   4   3   2   1   0
;	+---+---+---+---+---+---+---+---+
;	|CM3|CM2|CM1|CM0|LO3|LO2|LO1|LO0|
;	+---+---+---+---+---+---+---+---+
;
;	CM : 0000 :       : Stop
;	     0001 :       : Invalid
;	     0010 :       : Invalid
;	     0011 :       : Invalid
;	     0100 : POINT : Point
;	     0101 : PSET  : Pset
;	     0110 : SRCH  : Search
;	     0111 : LINE  : Line
;	     1000 : LMMV  : Logical move (VDP->VRAM)
;	     1001 : LMMM  : Logical move (VRAM->VRAM)
;	     1010 : LMCM  : Logical move (VRAM->CPU)
;	     1011 : LMMC  : Logical move (CPU->VRAM)
;	     1100 : HMMV  : High speed move (VDP->VRAM)
;	     1101 : HMMM  : High speed move (VRAM->VRAM)
;	     1110 : YMMM  : High speed move (VRAM->VRAM)
;	     1111 : HMMC  : High speed move (CPU->VRAM)
;
;	d0.b ... data

	SetVDPreg 46
	
;	trap	#9
	
	move.b	d0,VDPreg_46(regFtbl)			* 12
	
	
	rts						* 16
	EndSetVDPreg 46


;--- 未使用
	SetVDPreg 47
	rts						* 16
	EndSetVDPreg 47

;--- 未使用
	SetVDPreg 48
	rts						* 16
	EndSetVDPreg 48

;--- 未使用
	SetVDPreg 49
	rts						* 16
	EndSetVDPreg 49

;--- 未使用
	SetVDPreg 50
	rts						* 16
	EndSetVDPreg 50

;--- 未使用
	SetVDPreg 51
	rts						* 16
	EndSetVDPreg 51

;--- 未使用
	SetVDPreg 52
	rts						* 16
	EndSetVDPreg 52

;--- 未使用
	SetVDPreg 53
	rts						* 16
	EndSetVDPreg 53

;--- 未使用
	SetVDPreg 54
	rts						* 16
	EndSetVDPreg 54

;--- 未使用
	SetVDPreg 55
	rts						* 16
	EndSetVDPreg 55

;--- 未使用
	SetVDPreg 56
	rts						* 16
	EndSetVDPreg 56

;--- 未使用
	SetVDPreg 57
	rts						* 16
	EndSetVDPreg 57

;--- 未使用
	SetVDPreg 58
	rts						* 16
	EndSetVDPreg 58

;--- 未使用
	SetVDPreg 59
	rts						* 16
	EndSetVDPreg 59

;--- 未使用
	SetVDPreg 60
	rts						* 16
	EndSetVDPreg 60

;--- 未使用
	SetVDPreg 61
	rts						* 16
	EndSetVDPreg 61

;--- 未使用
	SetVDPreg 62
	rts						* 16
	EndSetVDPreg 62

;--- 未使用
	SetVDPreg 63
	rts						* 16
	EndSetVDPreg 63




*----------------------------------------------------------------------------------------------

*--- Status Register 0
*
*	  7   6   5   4   3   2   1   0
*	+---+---+---+---+---+---+---+---+
*	| F | 5S| C |    5th sprite #   |
*	+---+---+---+---+---+---+---+---+
*
*	d1.b ... data
	StatusReg 0
	move.b	StatusReg_0(regFtbl),d1			* 12
	
	clr.b	StatusReg_0(regFtbl)			* 16
	
	rts						* 16
	EndStatusReg 0



*--- Status Register 1
*	  7   6   5   4   3   2   1   0
*	+---+---+---+---+---+---+---+---+
*	| FL|LPS|        ID#        | FH|
*	+---+---+---+---+---+---+---+---+
*
*	d1.b ... data
	StatusReg 1
	move.b	StatusReg_1(regFtbl),d1			* 12
	
	rts						* 16
	EndStatusReg 1



*--- Status Register 2
*	  7   6   5   4   3   2   1   0
*	+---+---+---+---+---+---+---+---+
*	| TR| VR| HR| BD| 1 | 1 | EO| CE|
*	+---+---+---+---+---+---+---+---+
*
*	d1.b は０が入っている
*	d1.b ... ret data
	StatusReg 2
	move.b	MFP_GPIP,d0				* (6) 16
	
	*-- 水平同期期間
	bpl.s	@f					* (2) 10/ 8 (T/F)
	moveq.l	#%0010_0000,d1				* (2)  4
@@:	
	
	*-- 垂直帰線期間
	andi.b	#%0001_0000,d0				* (4)  8
	bne.s	@f					* (2) 10/ 8 (T/F)
	ori.b	#%0100_0000,d1				* (4)  8
@@:
	*-- 
	or.b	StatusReg_2(regFtbl),d1			* (4) 12
	
	rts						* (2) 16
	EndStatusReg 2



*--- Status Register 3
*	  7   6   5   4   3   2   1   0
*	+---+---+---+---+---+---+---+---+
*	| X7| X6| X5| X4| X3| X2| X1| X0|
*	+---+---+---+---+---+---+---+---+
*
*	d1.b ... data
	StatusReg 3
	move.b	StatusReg_3(regFtbl),d1			* 12
	
	rts						* 16
	EndStatusReg 3



*--- Status Register 4
*	  7   6   5   4   3   2   1   0
*	+---+---+---+---+---+---+---+---+
*	| 1 | 1 | 1 | 1 | 1 | 1 | 1 | X8|
*	+---+---+---+---+---+---+---+---+
*
*	d1.b ... data
	StatusReg 4
	move.b	StatusReg_4(regFtbl),d1			* 12
	
	rts						* 16
	EndStatusReg 4



*--- Status Register 5
*	  7   6   5   4   3   2   1   0
*	+---+---+---+---+---+---+---+---+
*	| Y7| Y6| Y5| Y4| Y3| Y2| Y1| Y0|
*	+---+---+---+---+---+---+---+---+
*
*	d1.b ... data
	StatusReg 5
	move.b	StatusReg_5(regFtbl),d1			* 12
	
	rts						* 16
	EndStatusReg 5



*--- Status Register 6
*	  7   6   5   4   3   2   1   0
*	+---+---+---+---+---+---+---+---+
*	| 1 | 1 | 1 | 1 | 1 | 1 | EO| Y8|
*	+---+---+---+---+---+---+---+---+
*
*	d1.b ... data
	StatusReg 6
	move.b	StatusReg_6(regFtbl),d1			* 12
	
	rts						* 16
	EndStatusReg 6



*--- Status Register 7
*	  7   6   5   4   3   2   1   0
*	+---+---+---+---+---+---+---+---+
*	| C7| C6| C5| C4| C3| C2| C1| C0|
*	+---+---+---+---+---+---+---+---+
*
*	d1.b ... data
	StatusReg 7
	move.b	StatusReg_7(regFtbl),d1			* 12
	
	rts						* 16
	EndStatusReg 7



*--- Status Register 8
*	  7   6   5   4   3   2   1   0
*	+---+---+---+---+---+---+---+---+
*	|BX7|BX6|BX5|BX4|BX3|BX2|BX1|BX0|
*	+---+---+---+---+---+---+---+---+
*
*	d1.b ... data
	StatusReg 8
	move.b	StatusReg_8(regFtbl),d1			* 12
	
	rts						* 16
	EndStatusReg 8



*--- Status Register 9
*	  7   6   5   4   3   2   1   0
*	+---+---+---+---+---+---+---+---+
*	| 1 | 1 | 1 | 1 | 1 | 1 | 1 |BX8|
*	+---+---+---+---+---+---+---+---+
*
*	d1.b ... data
	StatusReg 9
	move.b	StatusReg_9(regFtbl),d1			* 12
	
	rts						* 16
	EndStatusReg 9



*--- Status Register 10
	StatusReg 10
	st.b	d1					*  6
	
	rts						* 16
	EndStatusReg 10



*--- Status Register 11
	StatusReg 11
	st.b	d1					*  6
	
	rts						* 16
	EndStatusReg 11



*--- Status Register 12
	StatusReg 12
	st.b	d1					*  6
	
	rts						* 16
	EndStatusReg 12



*--- Status Register 13
	StatusReg 13
	st.b	d1					*  6
	
	rts						* 16
	EndStatusReg 13



*--- Status Register 14
	StatusReg 14
	st.b	d1					*  6
	
	rts						* 16
	EndStatusReg 14



*--- Status Register 15
	StatusReg 15
	st.b	d1					*  6
	
	rts						* 16
	EndStatusReg 15
